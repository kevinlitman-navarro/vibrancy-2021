{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "LayerCake.svelte",
    "Html.svelte",
    "ScaledSvg.svelte",
    "Svg.svelte",
    "SimpleAutocomplete.svelte",
    "AnnotatedToggle.svelte",
    "Annotation.svelte",
    "App.svelte",
    "AxisX.svelte",
    "Bars.svelte",
    "Collapse.svelte",
    "Global.svelte",
    "GlobalBars.svelte",
    "GlobalButton.svelte",
    "GlobalMetrics.svelte",
    "GlobalSliders.svelte",
    "Header.svelte",
    "Heatmap.svelte",
    "Intro.svelte",
    "Line.svelte",
    "Methodology.svelte",
    "National.svelte",
    "NationalBars.svelte",
    "NationalCountrySelect.svelte",
    "NationalLines.svelte",
    "Slider.svelte",
    "Table.svelte",
    "Toggle.svelte",
    "Tooltip.svelte",
    "YearSlider.svelte",
    "Icon.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport calcExtents from './lib/calcExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport defaultScales from './settings/defaultScales.js';\n\timport defaultReverses from './settings/defaultReverses.js';\n\n\texport let ssr = false;\n\texport let pointerEvents = true;\n\texport let position = 'relative';\n\texport let percentRange = false;\n\n\texport let width = undefined;\n\texport let height = undefined;\n\n\texport let containerWidth = width || 100;\n\texport let containerHeight = height || 100;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\texport let x = undefined;\n\texport let y = undefined;\n\texport let z = undefined;\n\texport let r = undefined;\n\texport let custom = {};\n\texport let data = [];\n\texport let xDomain = undefined;\n\texport let yDomain = undefined;\n\texport let zDomain = undefined;\n\texport let rDomain = undefined;\n\texport let xNice = false;\n\texport let yNice = false;\n\texport let zNice = false;\n\texport let rNice = false;\n\texport let xReverse = defaultReverses.x;\n\texport let yReverse = defaultReverses.y;\n\texport let zReverse = defaultReverses.z;\n\texport let rReverse = defaultReverses.r;\n\texport let xPadding = undefined;\n\texport let yPadding = undefined;\n\texport let zPadding = undefined;\n\texport let rPadding = undefined;\n\texport let xScale = defaultScales.x;\n\texport let yScale = defaultScales.y;\n\texport let zScale = defaultScales.y;\n\texport let rScale = defaultScales.r;\n\texport let xRange = undefined;\n\texport let yRange = undefined;\n\texport let zRange = undefined;\n\texport let rRange = undefined;\n\texport let padding = {};\n\texport let extents = {};\n\texport let flatData = undefined;\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable();\n\tconst _containerWidth = writable();\n\tconst _containerHeight = writable();\n\tconst _x = writable();\n\tconst _y = writable();\n\tconst _z = writable();\n\tconst _r = writable();\n\tconst _custom = writable();\n\tconst _data = writable();\n\tconst _xDomain = writable();\n\tconst _yDomain = writable();\n\tconst _zDomain = writable();\n\tconst _rDomain = writable();\n\tconst _xNice = writable();\n\tconst _yNice = writable();\n\tconst _zNice = writable();\n\tconst _rNice = writable();\n\tconst _xReverse = writable();\n\tconst _yReverse = writable();\n\tconst _zReverse = writable();\n\tconst _rReverse = writable();\n\tconst _xPadding = writable();\n\tconst _yPadding = writable();\n\tconst _zPadding = writable();\n\tconst _rPadding = writable();\n\tconst _xScale = writable();\n\tconst _yScale = writable();\n\tconst _zScale = writable();\n\tconst _rScale = writable();\n\tconst _xRange = writable();\n\tconst _yRange = writable();\n\tconst _zRange = writable();\n\tconst _rRange = writable();\n\tconst _padding = writable();\n\tconst _flatData = writable();\n\tconst _extents = writable();\n\tconst _config = writable(config);\n\n\t$: _percentRange.set(percentRange);\n\t$: _containerWidth.set(containerWidth);\n\t$: _containerHeight.set(containerHeight);\n\t$: _x.set(makeAccessor(x));\n\t$: _y.set(makeAccessor(y));\n\t$: _z.set(makeAccessor(z));\n\t$: _r.set(makeAccessor(r));\n\t$: _xDomain.set(xDomain);\n\t$: _yDomain.set(yDomain);\n\t$: _zDomain.set(zDomain);\n\t$: _rDomain.set(rDomain);\n\t$: _custom.set(custom);\n\t$: _data.set(data);\n\t$: _xNice.set(xNice);\n\t$: _yNice.set(yNice);\n\t$: _zNice.set(zNice);\n\t$: _rNice.set(rNice);\n\t$: _xReverse.set(xReverse);\n\t$: _yReverse.set(yReverse);\n\t$: _zReverse.set(zReverse);\n\t$: _rReverse.set(rReverse);\n\t$: _xPadding.set(xPadding);\n\t$: _yPadding.set(yPadding);\n\t$: _zPadding.set(zPadding);\n\t$: _rPadding.set(rPadding);\n\t$: _xScale.set(xScale);\n\t$: _yScale.set(yScale);\n\t$: _zScale.set(zScale);\n\t$: _rScale.set(rScale);\n\t$: _xRange.set(xRange);\n\t$: _yRange.set(yRange);\n\t$: _zRange.set(zRange);\n\t$: _rRange.set(rRange);\n\t$: _padding.set(padding);\n\t$: _extents.set(filterObject(extents));\n\t$: _flatData.set(flatData || data);\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\treturn [\n\t\t\t{ field: 'x', accessor: $x },\n\t\t\t{ field: 'y', accessor: $y },\n\t\t\t{ field: 'z', accessor: $z },\n\t\t\t{ field: 'r', accessor: $r }\n\t\t].filter(d => d.accessor);\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {\n\t\tconst b = {};\n\t\tb.top = $padding.top;\n\t\tb.right = $containerWidth - $padding.right;\n\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\tb.left = $padding.left;\n\t\tb.width = b.right - b.left;\n\t\tb.height = b.bottom - b.top;\n\t\tif (b.width < 0 && b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative width and height. Did you forget to set a width or height on the container?');\n\t\t} else if (b.width < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has a negative width. Did you forget to set that CSS on the container?');\n\t\t} else if (b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative height. Did you forget to set that CSS on the container?');\n\t\t}\n\t\treturn b;\n\t});\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t */\n\tconst extents_d = derived([_flatData, activeGetters_d, _extents], ([$flatData, $activeGetters, $extents]) => {\n\t\treturn { ...calcExtents($flatData, $activeGetters.filter(d => !$extents[d.field])), ...$extents };\n\t});\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived([_xScale, extents_d, xDomain_d, _xPadding, _xNice, _xReverse, width_d, height_d, _xRange, _percentRange], createScale('x'));\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived([_yScale, extents_d, yDomain_d, _yPadding, _yNice, _yReverse, width_d, height_d, _yRange, _percentRange], createScale('y'));\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived([_zScale, extents_d, zDomain_d, _zPadding, _zNice, _zReverse, width_d, height_d, _zRange, _percentRange], createScale('z'));\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived([_rScale, extents_d, rDomain_d, _rPadding, _rNice, _rReverse, width_d, height_d, _rRange, _percentRange], createScale('r'));\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$aspectRatio, $width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n</script>\n\n{#if (ssr === true || typeof window !== 'undefined')}\n\t<div\n\t\tclass=\"layercake-container\"\n\t\tstyle=\"\n\t\t\tposition:{position};\n\t\t\t{position === 'absolute' ? 'top:0;right:0;bottom:0;left:0;' : ''}\n\t\t\t{pointerEvents === false ? 'pointer-events:none;' : ''}\n\t\t\"\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t></slot>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<div\n\tclass=\"layercake-layout-html\"\n\tstyle=\"top: {$padding.top}px; right:{$padding.right}px; bottom:{$padding.bottom}px; left:{$padding.left}px;{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let fixedAspectRatio = 1;\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<svg\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle=\"top: {$padding.top}px; right:0px; bottom:0px; left:{$padding.left}px;width:calc(100% - {($padding.left + $padding.right)}px);height:calc(100% - {($padding.top + $padding.bottom)}px);{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let viewBox = undefined;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n<svg\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle=\"{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g transform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}</style>\n",
    "<script>\n  // the list of items  the user can select from\n  export let items = [];\n\n  // field of each item that's used for the labels in the list\n  export let labelFieldName = undefined;\n  export let keywordsFieldName = labelFieldName;\n  export let valueFieldName = undefined;\n\n  export let labelFunction = function(item) {\n    if (item === undefined || item === null) {\n      return \"\";\n    }\n    return labelFieldName ? item[labelFieldName] : item;\n  };\n\n  export let keywordsFunction = function(item) {\n    if (item === undefined || item === null) {\n      return \"\";\n    }\n    return keywordsFieldName ? item[keywordsFieldName] : labelFunction(item);\n  };\n\n  export let valueFunction = function(item) {\n    if (item === undefined || item === null) {\n      return item;\n    }\n    return valueFieldName ? item[valueFieldName] : item;\n  };\n\n  export let keywordsCleanFunction = function(keywords) {\n    return keywords;\n  };\n\n  export let textCleanFunction = function(userEnteredText) {\n    return userEnteredText;\n  };\n\n  export let searchFunction = false;\n\n  export let beforeChange = function(oldSelectedItem, newSelectedItem) {\n    return true;\n  };\n  export let onChange = function(newSelectedItem) {};\n\n  export let selectFirstIfEmpty = false;\n\n  export let minCharactersToSearch = 1;\n  export let maxItemsToShowInList = 0;\n  export let noResultsText = \"No results found\";\n\n  const uniqueId = \"sautocomplete-\" + Math.floor(Math.random() * 1000);\n\n  function safeStringFunction(theFunction, argument) {\n    if (typeof theFunction !== \"function\") {\n      console.error(\n        \"Not a function: \" + theFunction + \", argument: \" + argument\n      );\n    }\n    let originalResult;\n    try {\n      originalResult = theFunction(argument);\n    } catch (error) {\n      console.warn(\n        \"Error executing Autocomplete function on value: \" +\n          argument +\n          \" function: \" +\n          theFunction\n      );\n    }\n    let result = originalResult;\n    if (result === undefined || result === null) {\n      result = \"\";\n    }\n    if (typeof result !== \"string\") {\n      result = result.toString();\n    }\n    return result;\n  }\n\n  function safeLabelFunction(item) {\n    // console.log(\"labelFunction: \" + labelFunction);\n    // console.log(\"safeLabelFunction, item: \" + item);\n    return safeStringFunction(labelFunction, item);\n  }\n\n  function safeKeywordsFunction(item) {\n    // console.log(\"safeKeywordsFunction\");\n    const keywords = safeStringFunction(keywordsFunction, item);\n    let result = safeStringFunction(keywordsCleanFunction, keywords);\n    result = result.toLowerCase().trim();\n    if (debug) {\n      console.log(\n        \"Extracted keywords: '\" +\n          result +\n          \"' from item: \" +\n          JSON.stringify(item)\n      );\n    }\n    return result;\n  }\n\n  // the text displayed when no option is selected\n  export let placeholder = undefined;\n  // apply a className to the control\n  export let className = undefined;\n\n  // apply a className to the input control\n  export let inputClassName = undefined;\n\n  // apply a id to the input control\n  export let inputId = undefined;\n\n  // generate an HTML input with this name, containing the current value\n  export let name = undefined;\n\n  // apply a className to the dropdown div\n  export let dropdownClassName = undefined;\n\n  // option to hide the dropdown arrow\n  export let hideArrow = false;\n\n  // option to show clear selection button\n  export let showClear = false;\n\n  // adds the disabled tag to the HTML input\n  export let disabled = false;\n  // add the title to the HTML input\n  export let title = undefined;\n  export let debug = false;\n\n  // selected item state\n  export let selectedItem = undefined;\n  export let value = undefined;\n  let text;\n  let filteredTextLength = 0;\n\n  function onSelectedItemChanged() {\n    value = valueFunction(selectedItem);\n    text = safeLabelFunction(selectedItem);\n    onChange(selectedItem);\n  }\n\n  $: selectedItem, onSelectedItemChanged();\n\n  // HTML elements\n  let input;\n  let list;\n\n  // UI state\n  let opened = false;\n  let highlightIndex = -1;\n\n  $: showList =\n    opened && ((items && items.length > 0) || filteredTextLength > 0);\n\n  // view model\n  let filteredListItems;\n\n  let listItems = [];\n\n  function prepareListItems() {\n    let tStart;\n    if (debug) {\n      tStart = performance.now();\n      console.log(\"prepare items to search\");\n      console.log(\"items: \" + JSON.stringify(items));\n    }\n\n    if (!Array.isArray(items)) {\n      console.warn(\n        \"Autocomplete items / search function did not return array but\",\n        items\n      );\n      items = [];\n    }\n\n    const length = items ? items.length : 0;\n    listItems = new Array(length);\n\n    if (length > 0) {\n      items.forEach((item, i) => {\n        const listItem = getListItem(item);\n        if (listItem == undefined) {\n          console.log(\"Undefined item for: \", item);\n        }\n        listItems[i] = listItem;\n      });\n    }\n\n    if (debug) {\n      const tEnd = performance.now();\n      console.log(\n        listItems.length +\n          \" items to search prepared in \" +\n          (tEnd - tStart) +\n          \" milliseconds\"\n      );\n    }\n  }\n\n  function getListItem(item) {\n    return {\n      // keywords representation of the item\n      keywords: safeKeywordsFunction(item),\n      // item label\n      label: safeLabelFunction(item),\n      // store reference to the origial item\n      item: item\n    };\n  }\n\n  $: items, prepareListItems();\n\n  function prepareUserEnteredText(userEnteredText) {\n    if (userEnteredText === undefined || userEnteredText === null) {\n      return \"\";\n    }\n\n    const textFiltered = userEnteredText\n      .replace(/[&/\\\\#,+()$~%.'\":*?<>{}]/g, \" \")\n      .trim();\n\n    filteredTextLength = textFiltered.length;\n\n    if (minCharactersToSearch > 1) {\n      if (filteredTextLength < minCharactersToSearch) {\n        return \"\";\n      }\n    }\n\n    const cleanUserEnteredText = textCleanFunction(textFiltered);\n    const textFilteredLowerCase = cleanUserEnteredText.toLowerCase().trim();\n\n    if (debug) {\n      console.log(\n        \"Change user entered text '\" +\n          userEnteredText +\n          \"' into '\" +\n          textFilteredLowerCase +\n          \"'\"\n      );\n    }\n    return textFilteredLowerCase;\n  }\n\n  async function search() {\n    let tStart;\n    if (debug) {\n      tStart = performance.now();\n      console.log(\"Searching user entered text: '\" + text + \"'\");\n    }\n\n    const textFiltered = prepareUserEnteredText(text);\n\n    if (textFiltered === \"\") {\n      filteredListItems = listItems;\n      closeIfMinCharsToSearchReached();\n      if (debug) {\n        console.log(\n          \"User entered text is empty set the list of items to all items\"\n        );\n      }\n      return;\n    }\n\n    if (searchFunction) {\n      items = await searchFunction(textFiltered);\n      prepareListItems();\n    }\n\n    const searchWords = textFiltered.split(\" \");\n\n    let tempfilteredListItems = listItems.filter(listItem => {\n      if (!listItem) {\n        return false;\n      }\n      const itemKeywords = listItem.keywords;\n\n      let matches = 0;\n      searchWords.forEach(searchWord => {\n        if (itemKeywords.includes(searchWord)) {\n          matches++;\n        }\n      });\n\n      return matches >= searchWords.length;\n    });\n\n    const hlfilter = highlightFilter(textFiltered, [\"label\"]);\n    const filteredListItemsHighlighted = tempfilteredListItems.map(hlfilter);\n\n    filteredListItems = filteredListItemsHighlighted;\n    closeIfMinCharsToSearchReached();\n    if (debug) {\n      const tEnd = performance.now();\n      console.log(\n        \"Search took \" +\n          (tEnd - tStart) +\n          \" milliseconds, found \" +\n          filteredListItems.length +\n          \" items\"\n      );\n    }\n  }\n\n  // $: text, search();\n\n  function selectListItem(listItem) {\n    if (debug) {\n      console.log(\"selectListItem\");\n    }\n    if (\"undefined\" === typeof listItem) {\n      if (debug) {\n        console.log(`listItem ${i} is undefined. Can not select.`);\n      }\n      return false;\n    }\n    const newSelectedItem = listItem.item;\n    if (beforeChange(selectedItem, newSelectedItem)) {\n      selectedItem = newSelectedItem;\n    }\n    return true;\n  }\n\n  function selectItem() {\n    if (debug) {\n      console.log(\"selectItem\");\n    }\n    const listItem = filteredListItems[highlightIndex];\n    if (selectListItem(listItem)) {\n      close();\n    }\n  }\n\n  function up() {\n    if (debug) {\n      console.log(\"up\");\n    }\n\n    open();\n    if (highlightIndex > 0) highlightIndex--;\n    highlight();\n  }\n\n  function down() {\n    if (debug) {\n      console.log(\"down\");\n    }\n\n    open();\n    if (highlightIndex < filteredListItems.length - 1) highlightIndex++;\n    highlight();\n  }\n\n  function highlight() {\n    if (debug) {\n      console.log(\"highlight\");\n    }\n\n    const query = \".selected\";\n    if (debug) {\n      console.log(\"Seaching DOM element: \" + query + \" in \" + list);\n    }\n    const el = list.querySelector(query);\n    if (el) {\n      if (typeof el.scrollIntoViewIfNeeded === \"function\") {\n        if (debug) {\n          console.log(\"Scrolling selected item into view\");\n        }\n        el.scrollIntoViewIfNeeded();\n      } else {\n        if (debug) {\n          console.warn(\n            \"Could not scroll selected item into view, scrollIntoViewIfNeeded not supported\"\n          );\n        }\n      }\n    } else {\n      if (debug) {\n        console.warn(\"Selected item not found to scroll into view\");\n      }\n    }\n  }\n\n  function onListItemClick(listItem) {\n    if (debug) {\n      console.log(\"onListItemClick\");\n    }\n\n    if (selectListItem(listItem)) {\n      close();\n    }\n  }\n\n  function onDocumentClick(e) {\n    if (debug) {\n      console.log(\"onDocumentClick: \" + JSON.stringify(e.target));\n    }\n    if (e.target.closest(\".\" + uniqueId)) {\n      if (debug) {\n        console.log(\"onDocumentClick inside\");\n      }\n      // resetListToAllItemsAndOpen();\n      highlight();\n    } else {\n      if (debug) {\n        console.log(\"onDocumentClick outside\");\n      }\n      close();\n    }\n  }\n\n  function onKeyDown(e) {\n    if (debug) {\n      console.log(\"onKeyDown\");\n    }\n\n    let key = e.key;\n    if (key === \"Tab\" && e.shiftKey) key = \"ShiftTab\";\n    const fnmap = {\n      Tab: opened ? down.bind(this) : null,\n      ShiftTab: opened ? up.bind(this) : null,\n      ArrowDown: down.bind(this),\n      ArrowUp: up.bind(this),\n      Escape: onEsc.bind(this)\n    };\n    const fn = fnmap[key];\n    if (typeof fn === \"function\") {\n      e.preventDefault();\n      fn(e);\n    }\n  }\n\n  function onKeyPress(e) {\n    if (debug) {\n      console.log(\"onKeyPress\");\n    }\n\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      selectItem();\n    }\n  }\n\n  function onInput(e) {\n    if (debug) {\n      console.log(\"onInput\");\n    }\n\n    text = e.target.value;\n    search();\n    highlightIndex = 0;\n    open();\n  }\n\n  function onInputClick() {\n    if (debug) {\n      console.log(\"onInputClick\");\n    }\n    resetListToAllItemsAndOpen();\n  }\n\n  function onEsc(e) {\n    if (debug) {\n      console.log(\"onEsc\");\n    }\n\n    //if (text) return clear();\n    e.stopPropagation();\n    if (opened) {\n      input.focus();\n      close();\n    }\n  }\n\n  function onFocus() {\n    if (debug) {\n      console.log(\"onFocus\");\n    }\n\n    resetListToAllItemsAndOpen();\n  }\n\n  function resetListToAllItemsAndOpen() {\n    if (debug) {\n      console.log(\"resetListToAllItemsAndOpen\");\n    }\n\n    filteredListItems = listItems;\n\n    open();\n\n    // find selected item\n    if (selectedItem) {\n      if (debug) {\n        console.log(\n          \"Searching currently selected item: \" + JSON.stringify(selectedItem)\n        );\n      }\n      for (let i = 0; i < listItems.length; i++) {\n        const listItem = listItems[i];\n        if (\"undefined\" === typeof listItem) {\n          if (debug) {\n            console.log(`listItem ${i} is undefined. Skipping.`);\n          }\n          continue;\n        }\n        if (debug) {\n          console.log(\"Item \" + i + \": \" + JSON.stringify(listItem));\n        }\n        if (selectedItem == listItem.item) {\n          highlightIndex = i;\n          if (debug) {\n            console.log(\n              \"Found selected item: \" + i + \": \" + JSON.stringify(listItem)\n            );\n          }\n          highlight();\n          break;\n        }\n      }\n    }\n  }\n\n  function open() {\n    if (debug) {\n      console.log(\"open\");\n    }\n\n    // check if the search text has more than the min chars required\n    if (isMinCharsToSearchReached()) {\n      return;\n    }\n\n    opened = true;\n  }\n\n  function close() {\n    if (debug) {\n      console.log(\"close\");\n    }\n    opened = false;\n\n    if (!text && selectFirstIfEmpty) {\n      highlightFilter = 0;\n      selectItem();\n    }\n  }\n\n  function isMinCharsToSearchReached() {\n    return (\n      minCharactersToSearch > 1 && filteredTextLength < minCharactersToSearch\n    );\n  }\n\n  function closeIfMinCharsToSearchReached() {\n    if (isMinCharsToSearchReached()) {\n      close();\n    }\n  }\n\n  function clear() {\n    if (debug) {\n      console.log(\"clear\");\n    }\n\n    text = \"\";\n    selectedItem = undefined;\n\n    setTimeout(() => {\n      input.focus();\n      close();\n    });\n  }\n\n  function onBlur() {\n    if (debug) {\n      console.log(\"onBlur\");\n    }\n    close();\n  }\n  // 'item number one'.replace(/(it)(.*)(nu)(.*)(one)/ig, '<b>$1</b>$2 <b>$3</b>$4 <b>$5</b>')\n  function highlightFilter(q, fields) {\n    const qs = \"(\" + q.trim().replace(/\\s/g, \")(.*)(\") + \")\";\n    const reg = new RegExp(qs, \"ig\");\n    let n = 1;\n    const len = qs.split(\")(\").length + 1;\n    let repl = \"\";\n    for (; n < len; n++) repl += n % 2 ? `<b>$${n}</b>` : `$${n}`;\n\n    return i => {\n      const newI = Object.assign({ highlighted: {} }, i);\n      if (fields) {\n        fields.forEach(f => {\n          if (!newI[f]) return;\n          newI.highlighted[f] = newI[f].replace(reg, repl);\n        });\n      }\n      return newI;\n    };\n  }\n</script>\n\n<style>\n  .autocomplete {\n    min-width: 200px;\n    display: inline-block;\n    max-width: 100%;\n    position: relative;\n    vertical-align: top;\n    height: 2.25em;\n  }\n\n  .autocomplete:not(.hide-arrow)::after {\n    border: 3px solid transparent;\n    border-radius: 2px;\n    border-right: 0;\n    border-top: 0;\n    content: \" \";\n    display: block;\n    height: 0.625em;\n    margin-top: -0.4375em;\n    pointer-events: none;\n    position: absolute;\n    top: 50%;\n    transform: rotate(-45deg);\n    transform-origin: center;\n    width: 0.625em;\n    border-color: #3273dc;\n    right: 1.125em;\n    z-index: 4;\n  }\n\n  .autocomplete.show-clear:not(.hide-arrow)::after {\n    right: 2.3em;\n  }\n\n  .autocomplete * {\n    box-sizing: border-box;\n  }\n  .autocomplete-input {\n    font: inherit;\n    width: 100%;\n    height: 100%;\n    padding: 5px 11px;\n  }\n\n  .autocomplete:not(.hide-arrow) .autocomplete-input {\n    padding-right: 2em;\n  }\n  .autocomplete.show-clear:not(.hide-arrow) .autocomplete-input {\n    padding-right: 3.2em;\n  }\n  .autocomplete.hide-arrow.show-clear .autocomplete-input {\n    padding-right: 2em;\n  }\n\n  .autocomplete-list {\n    background: #fff;\n    position: relative;\n    width: 100%;\n    overflow-y: auto;\n    z-index: 99;\n    padding: 10px 0;\n    top: 0px;\n    border: 1px solid #999;\n    max-height: calc(15 * (1rem + 10px) + 15px);\n    -webkit-user-select: none;\n       -moz-user-select: none;\n        -ms-user-select: none;\n            user-select: none;\n  }\n  .autocomplete-list:empty {\n    padding: 0;\n  }\n  .autocomplete-list-item {\n    padding: 5px 15px;\n    color: #333;\n    cursor: pointer;\n    line-height: 1;\n  }\n\n  .autocomplete-list-item:hover,\n  .autocomplete-list-item.selected {\n    background-color: #2e69e2;\n    color: #fff;\n  }\n  .autocomplete-list-item-no-results {\n    padding: 5px 15px;\n    color: #999;\n    line-height: 1;\n  }\n\n  .autocomplete-list.hidden {\n    display: none;\n  }\n\n  .autocomplete.show-clear .autocomplete-clear-button {\n    cursor: pointer;\n    display: block;\n    text-align: center;\n    position: absolute;\n    right: 0.1em;\n    padding: 0.3em 0.6em;\n    top: 50%;\n    transform: translateY(-50%);\n    z-index: 4;\n  }\n\n  .autocomplete:not(.show-clear) .autocomplete-clear-button {\n    display: none;\n  }</style>\n\n<div\n  class=\"{className ? className : ''}\n  {hideArrow ? 'hide-arrow is-multiple' : ''}\n  {showClear ? 'show-clear' : ''} autocomplete select is-fullwidth {uniqueId}\">\n  <input\n    type=\"text\"\n    class=\"{inputClassName ? inputClassName : ''} input autocomplete-input\"\n    id={inputId ? inputId : ''}\n    {placeholder}\n    {name}\n    {disabled}\n    {title}\n    bind:this={input}\n    bind:value={text}\n    on:input={onInput}\n    on:focus={onFocus}\n    on:keydown={onKeyDown}\n    on:click={onInputClick}\n    on:keypress={onKeyPress} />\n  {#if showClear}\n    <span on:click={clear} class=\"autocomplete-clear-button\">&#10006;</span>\n  {/if}\n  <div\n    class=\"{dropdownClassName ? dropdownClassName : ''} autocomplete-list {showList ? '' : 'hidden'}\n    is-fullwidth\"\n    bind:this={list}>\n    {#if filteredListItems && filteredListItems.length > 0}\n      {#each filteredListItems as listItem, i}\n        {#if listItem && (maxItemsToShowInList <= 0 || i < maxItemsToShowInList)}\n          {#if listItem}\n            <div\n              class=\"autocomplete-list-item {i === highlightIndex ? 'selected' : ''}\"\n              on:click={() => onListItemClick(listItem)}>\n              {#if listItem.highlighted}\n                {@html listItem.highlighted.label}\n              {:else}\n                {@html listItem.label}\n              {/if}\n            </div>\n          {/if}\n        {/if}\n      {/each}\n\n      {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}\n        <div class=\"autocomplete-list-item-no-results\">\n          ...{filteredListItems.length - maxItemsToShowInList} results not shown\n        </div>\n      {/if}\n    {:else if noResultsText}\n      <div class=\"autocomplete-list-item-no-results\">{noResultsText}</div>\n    {/if}\n  </div>\n</div>\n\n<svelte:window on:click={onDocumentClick} />\n",
    "<script>\n  import Toggle from \"./Toggle.svelte\";\n  export let options = [];\n  export let value = null;\n</script>\n\n<div class=\"toggle-container\">\n  <div class=\"annotation left\">\n    <p>Compare countries across 26 metrics</p>\n  </div>\n  <div class=\"toggle-box\">\n    <div class=\"eyebrow\">SELECT A VIEW</div>\n    <div class=\"toggle\">\n      <Toggle options=\"{options}\" value=\"{value}\" />\n    </div>\n  </div>\n  <div class=\"annotation right\">\n    <p>Select a country to see detailed metrics</p>\n  </div>\n</div>\n\n<style>\n  .toggle-container {\n    display: flex;\n    /* direction: column; */\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    margin-top: 0;\n    padding-top: 0;\n  }\n\n  .eyebrow {\n    text-align: center;\n    margin: 0 auto;\n    font-weight: 700;\n    margin-bottom: 0;\n  }\n\n  .toggle {\n    margin: 0 0.4em 0 0.4em;\n  }\n\n  .annotation {\n    max-width: 40%;\n  }\n\n  .left {\n    text-align: right;\n  }\n\n  .right {\n    text-align: left;\n  }</style>\n",
    "<script>\n  export let content;\n  export let top;\n  export let left;\n</script>\n\n<div class=\"annotation-container\" style=\"top:{top}px;left:{left}px;\">\n  <span class=\"annotation\">{content}</span>\n</div>\n\n<style>\n  .annotation-container {\n    max-width: 8rem;\n    /* top: 20vh;\n    left: 40vw; */\n    position: absolute;\n  }</style>\n",
    "<script>\n  import Heatmap from \"./Heatmap.svelte\";\n  import Header from \"./Header.svelte\";\n  import Global from \"./Global.svelte\";\n  import National from \"./National.svelte\";\n  import Methodology from \"./Methodology.svelte\";\n  import { csv } from \"d3-fetch\";\n  import { variables, data, toggle } from \"../stores/vibrancy.js\";\n  import { group } from \"d3-array\";\n  import codebook from \"../data/demo/codebook_2.csv\";\n  import { onMount } from \"svelte\";\n\n  let variable_names = [];\n\n  onMount(() => {\n    $variables = Array.from(\n      group(codebook, (d) => d.pillar_1),\n      ([metric_name, metadata]) => ({\n        metric_name,\n        metadata: metadata.map((v) => ({\n          ...v,\n          multiplier: 1,\n        })),\n        multiplier: 1,\n      })\n    );\n    $variables.forEach((d) => {\n      d.metadata.forEach((v) => {\n        variable_names.push(v.shortname_raw);\n        variable_names.push(v.shortname_scaled);\n      });\n    });\n    variable_names.push(\"PublishYear\");\n    console.log(variable_names);\n\n    csv(\"assets/data/full_data_3.csv\").then((raw) => {\n      $data = raw;\n      $data.forEach((z) => {\n        variable_names.forEach((x) => {\n          if (z[x] != \"-\") {\n            z[x] = parseFloat(z[x]);\n          }\n        });\n      });\n      console.log($variables);\n    });\n  });\n\n  $: console.log($toggle);\n</script>\n\n<!-- <section class=\"header\">\n  <Header />\n</section> -->\n{#if $data}\n  <section class=\"story\">\n    <section class=\"global\" class:active=\"{$toggle == 'Global'}\">\n      <Global />\n    </section>\n    <section class=\"national\" class:active=\"{$toggle == 'National'}\">\n      <National />\n    </section>\n  </section>\n  <div class=\"line\"></div>\n  <section class=\"methodology\">\n    <Methodology />\n  </section>\n{/if}\n\n<!-- <section class=\"header\">\n  <Header />\n</section> -->\n<style>\n  .header {\n    width: 100%;\n    height: 10vh;\n    position: -webkit-sticky;\n    position: sticky;\n  }\n\n  .line {\n    height: 1px;\n    width: 80%;\n    margin: 2rem auto 2rem auto;\n    /* align-self: center; */\n    /* margin: auto 0; */\n    /* height: 90%; */\n    background-color: var(--gray);\n  }\n  .story {\n    width: 100%;\n    height: 100%;\n    margin: 0 auto;\n  }\n\n  .methodology {\n    width: 100%;\n    margin: 0 auto;\n    height: 100%;\n    /* pointer-events: all; */\n  }\n  .global {\n    display: none;\n    height: 100%;\n    overflow-x: visible;\n  }\n\n  .active {\n    display: block;\n  }\n\n  .national {\n    display: none;\n    height: 100%;\n  }\n\n  .active {\n    display: block;\n  }</style>\n",
    "<script>\n  import { getContext } from \"svelte\";\n\n  const { width, height, xScale, yScale, yRange } = getContext(\"LayerCake\");\n  export let chart;\n  export let gridlines = true;\n  export let formatTick = (d) => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks = undefined;\n  export let xTick = 0;\n  export let yTick = 16;\n  export let dxTick = 0;\n  export let dyTick = 0;\n  export let axis_position = 1;\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : typeof ticks === \"function\"\n    ? ticks($xScale.ticks())\n    : $xScale.ticks(ticks);\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return \"start\";\n      }\n      if (i === tickVals.length - 1) {\n        return \"end\";\n      }\n    }\n    return \"middle\";\n  }\n</script>\n\n<g class=\"axis x-axis\">\n  {#each tickVals as tick, i}\n    <g\n      class=\"tick tick-{tick}\"\n      transform=\"translate({$xScale(tick)},{$yRange[0]})\"\n    >\n      {#if gridlines !== false}\n        <line y1=\"{$height * -1}\" y2=\"0\" x1=\"0\" x2=\"0\"></line>\n      {/if}\n      <text\n        x=\"{xTick}\"\n        y=\"{yTick}\"\n        dx=\"{dxTick}\"\n        dy=\"{dyTick}\"\n        text-anchor=\"{textAnchor(i)}\"\n      >\n        {formatTick(tick)}\n      </text>\n    </g>\n  {/each}\n  {#if baseline === true}\n    <line class=\"baseline\" y1=\"{$height}\" y2=\"{$height}\" x1=\"0\" x2=\"{$width}\"\n    ></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: 0.75em;\n  }\n\n  .tick:nth-of-type(even) {\n    display: none;\n  }\n\n  line,\n  .tick line {\n    stroke: var(--default);\n    stroke-dasharray: 2;\n    stroke-opacity: 0.33;\n  }\n\n  .tick text {\n    fill: var(--fg);\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n    stroke: var(--default);\n    stroke-opacity: 0.5;\n  }\n\n  @media only screen and (min-width: 640px) {\n    .tick:nth-of-type(even) {\n      display: none;\n    }\n\n    .tick:nth-of-type(4n + 1) {\n      display: block;\n    }\n  }</style>\n",
    "<script>\n  import { getContext, onMount, createEventDispatcher } from \"svelte\";\n  export let additional_data = [];\n  import { scaleOrdinal, scaleBand } from \"d3-scale\";\n  import {\n    ranked_metric,\n    country,\n    toggle,\n    tooltip_text,\n  } from \"../stores/vibrancy.js\";\n\n  const { data, xGet, xScale, yGet, zGet, yScale, custom, y } = getContext(\n    \"LayerCake\"\n  );\n  export let stacked;\n  export let ranked;\n  const dispatch = createEventDispatcher();\n  let clamped_scale;\n  let initial_range;\n  let show = false;\n  let current_x;\n  let current_y;\n  let pillar;\n  let type;\n\n  if (stacked) {\n    // initial_range = $yScale.range();\n    // console.log(initial_range);\n    // clamped_scale = scaleBand()\n    //   .paddingInner([0.05])\n    //   .range(initial_range)\n    //   .round(true);\n    // $yScale = clamped_scale;\n    clamped_scale = $yScale;\n    initial_range = $yScale.range();\n    console.log(initial_range);\n    clamped_scale = clamped_scale.range(initial_range);\n  }\n\n  $: columnWidth = (d) => {\n    const xVals = $xGet(d);\n    return xVals[1] - xVals[0];\n  };\n\n  let updateMessage = () => {\n    dispatch(\"message\", {\n      current_x,\n      current_y,\n      show,\n      type,\n    });\n  };\n\n  function handleMouseout() {\n    show = false;\n    updateMessage();\n  }\n\n  function handleMouseoverNational(d) {\n    show = true;\n    // $tooltip_text = $y(d).concat(\" : \").concat(Math.round(d.value), 2);\n    $tooltip_text = $y(d).concat(\": \").concat(Math.round(d.value));\n    current_x = columnWidth(d);\n    current_y = $yGet(d) - $yScale.bandwidth() * 2;\n    type = \"national\";\n\n    updateMessage();\n  }\n\n  function handleMouseoverRanked(d) {\n    show = true;\n    $tooltip_text = $y(d);\n    current_x = $xScale.range()[1] / 2;\n    current_y = $yGet(d);\n    type = \"rank\";\n\n    updateMessage();\n  }\n\n  function handleMouseoverGlobal(d) {\n    show = true;\n    $tooltip_text = $y(d);\n    current_x = $xGet(d)[0];\n    current_y = $yGet(d);\n    type = \"global\";\n\n    updateMessage();\n  }\n\n  console.log($data);\n</script>\n\n{#if stacked}\n  <g class=\"bar-group stacked\">\n    {#each $data as series}\n      {#each series as d, i}\n        <rect\n          name=\"{$y(d)}\"\n          class=\"group-rect stacked\"\n          data-id=\"{i}\"\n          x=\"{$xGet(d)[0]}\"\n          y=\"{$yGet(d)}\"\n          height=\"{$yScale.bandwidth()}\"\n          width=\"{columnWidth(d)}\"\n          fill=\"{$zGet(series)}\"\n          on:mouseenter=\"{handleMouseoverGlobal(d)}\"\n          on:mouseout=\"{handleMouseout}\"\n          on:click=\"{() => {\n            $country = $y(d);\n            $toggle = 'National';\n          }}\"></rect>\n      {/each}\n    {/each}\n  </g>\n{:else if ranked}\n  <g class=\"bar-group ranked\">\n    {#each $data as d, i}\n      <rect\n        name=\"{$y(d)}\"\n        class=\"group-rect\"\n        data-id=\"{i}\"\n        x=\"{$xScale.range()[1]}\"\n        y=\"{$yGet(d)}\"\n        fill=\"{$y(d) == $country ? '#041b33' : '#cccccc'}\"\n        height=\"{$yScale.bandwidth()}\"\n        width=\"{$xGet(d)}\"\n        transform=\"translate({-$xGet(d)},0)\"\n        on:mouseenter=\"{handleMouseoverRanked(d)}\"\n        on:mouseout=\"{handleMouseout}\"></rect>\n    {/each}\n  </g>\n{:else if !stacked}\n  <g class=\"bar-group national\">\n    {#each $data as d, i}\n      <rect\n        name=\"{$y(d)}\"\n        class=\"group-rect national\"\n        data-id=\"{i}\"\n        x=\"{$xScale.range()[0]}\"\n        y=\"{$yGet(d)}\"\n        fill=\"{$zGet(d)}\"\n        height=\"{$yScale.bandwidth()}\"\n        on:click=\"{() => {\n          $ranked_metric = d.variable;\n          $ranked_metric = $ranked_metric;\n          console.log($ranked_metric);\n        }}\"\n        on:mouseenter=\"{handleMouseoverNational(d)}\"\n        on:mouseout=\"{handleMouseout}\"\n        class:active=\"{$ranked_metric == d.variable}\"\n        width=\"{$xGet(d)}\"></rect>\n    {/each}\n  </g>\n{/if}\n\n<style>\n  rect.national:hover {\n    box-shadow: 0px 2px 10px rgba(191, 178, 162, 0.5);\n    opacity: 0.8;\n  }\n\n  .group-rect.stacked:hover {\n    box-shadow: 0px 2px 10px rgba(191, 178, 162, 0.5);\n    opacity: 0.8;\n  }\n\n  rect.active {\n    stroke: black;\n    stroke-width: 2px;\n  }</style>\n",
    "<script>\n  import Icon from \"./helpers/Icon.svelte\";\n\n  // based on suggestions from:\n  // Inclusive Components by Heydon Pickering https://inclusive-components.design/collapsible-sections/\n  export let headerText = \"See individual metrics\";\n  export let color;\n  export let type;\n  export let name;\n  export let research_clicked = false;\n  export let economy_clicked = false;\n  export let inclusion_clicked = false;\n  let expanded = false;\n  let fill = \"#666666\";\n\n  let check = () => {\n    if (name == \"Research & Development\") {\n      expanded = research_clicked;\n    } else if (name == \"Economy\") {\n      expanded = economy_clicked;\n    } else if (name == \"Inclusion\") {\n      expanded = inclusion_clicked;\n    }\n    expanded = expanded;\n  };\n\n  $: research_clicked, economy_clicked, inclusion_clicked, check();\n</script>\n\n<div class=\"collapse\">\n  <div class=\"clickable\" on:click=\"{() => (expanded = !expanded)}\">\n    {#if type == \"header\"}\n      <h1 class=\"header\">{headerText}</h1>\n    {:else if type == \"header-small\"}\n      <h3 class=\"header\">{headerText}</h3>\n    {:else}\n      <span class=\"see-more\">{headerText}</span>\n    {/if}\n\n    <button class=\"carrot\" aria-expanded=\"{expanded}\">\n      <div class=\"icon-container\" focusable=\"false\">\n        <div class=\"closed\">\n          <Icon\n            name=\"chevron-down\"\n            stroke=\"{fill}\"\n            strokeWidth=\"{type == 'header' ? 3 : 3}\"\n          />\n        </div>\n        <div class=\"open\">\n          <Icon name=\"chevron-left\" stroke=\"{fill}\" />\n        </div>\n      </div>\n    </button>\n  </div>\n\n  <div class=\"contents\" hidden=\"{!expanded}\">\n    <slot />\n  </div>\n</div>\n\n<style>\n  .clickable {\n    display: flex;\n  }\n  button {\n    all: inherit;\n    pointer-events: auto;\n    display: inline;\n    max-width: -webkit-fit-content;\n    max-width: -moz-fit-content;\n    max-width: fit-content;\n  }\n\n  .header {\n    margin: 0 auto;\n  }\n\n  .collapse {\n    width: 100%;\n    display: flex;\n    cursor: pointer;\n\n    flex-wrap: wrap;\n  }\n  .carrot {\n    width: 5px;\n  }\n\n  .see-more {\n    margin: 0;\n    margin-right: 0.5rem;\n  }\n\n  .open {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .closed {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .icon-container {\n    margin: auto 0;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .icon-container,\n  .contents {\n    pointer-events: auto;\n  }\n\n  button[aria-expanded=\"true\"] .closed {\n    display: none;\n  }\n\n  button[aria-expanded=\"false\"] .open {\n    display: none;\n  }\n  /* button:focus svg {\n    outline: 2px solid;\n    cursor: pointer;\n  } */\n\n  button [aria-expanded=\"true\"] rect {\n    fill: #666666;\n  }\n\n  .slider-container {\n    position: relative;\n  }</style>\n",
    "<script>\n  import GlobalMetrics from \"./GlobalMetrics.svelte\";\n  import Intro from \"./Intro.svelte\";\n  import GlobalBars from \"./GlobalBars.svelte\";\n</script>\n\n<div class=\"upper\">\n  <div class=\"intro\">\n    <Intro />\n  </div>\n  <div class=\"line\"></div>\n  <div class=\"top-right\">\n    <GlobalMetrics />\n  </div>\n</div>\n<div class=\"lower\">\n  <div class=\"chart\">\n    <GlobalBars />\n  </div>\n</div>\n\n<style>\n  .line {\n    width: 1px;\n    height: 350px;\n    align-self: center;\n    max-height: 400px;\n    justify-self: center;\n    /* : calc(100% - 6em); */\n    margin-left: 20px;\n    margin-right: 20px;\n    background-color: var(--gray);\n  }\n  .intro {\n    max-width: 550px;\n  }\n  .top-right {\n    width: 1px;\n    flex-grow: 1;\n    max-width: 550px;\n    overflow-x: visible;\n    overflow-y: visible;\n    height: 100%;\n    /* max-height: 100%; */\n  }\n  .upper {\n    display: flex;\n    direction: column;\n    justify-content: space-between;\n    overflow-x: visible;\n    width: calc(100% - 25px);\n    max-width: 1100px;\n    margin-bottom: 3rem;\n    height: 100%;\n    max-height: 426px;\n    margin: 0 auto;\n  }\n  .lower {\n    width: calc(100% - 25px);\n    max-width: 1000px;\n    margin: 0 auto;\n    margin-top: 2rem;\n    display: flex;\n    align-items: center;\n  }\n\n  .chart {\n    width: 100%;\n    margin: 0 auto;\n  }</style>\n",
    "<script>\n  import { LayerCake, Svg, Html, flatten } from \"layercake\";\n  import AxisX from \"./AxisX.svelte\";\n  import AxisY from \"./AxisY.svelte\";\n  import YearSlider from \"./YearSlider.svelte\";\n  import Tooltip from \"./Tooltip.svelte\";\n  import Annotation from \"./Annotation.svelte\";\n  import Bars from \"./Bars.svelte\";\n  import { data } from \"../stores/vibrancy.js\";\n  import { global_year } from \"../stores/vibrancy.js\";\n  import { onMount } from \"svelte\";\n  import { group, mean, ascending, sum, descending, filter } from \"d3-array\";\n  import { stack } from \"d3-shape\";\n  import { scaleBand, scaleOrdinal } from \"d3-scale\";\n  import { variables } from \"../stores/vibrancy.js\";\n\n  let mounted = false;\n  let data_2020;\n  let usable_country_cut;\n  let country_cut;\n  let current_key;\n  const xKey = \"country_name\";\n  const yKey = [0, 1];\n  const zKey = \"key\";\n  const metric_endpoint = \"_weighted\";\n  const pillar_endpoint = \"average\";\n  let updated_key;\n  let get_averages = [];\n\n  const seriesNames = [\"research_share\", \"economy_share\", \"inclusion_share\"];\n\n  const seriesColors = [\"#3a8dc7\", \"#249499\", \"#9d5da3\"];\n  let stackData;\n  let series;\n\n  let country_names = [];\n\n  let updateCountryData = () => {\n    country_cut = Array.from(\n      group($data, (d) => d.CountryName),\n      ([country_name, metadata]) => ({\n        country_name,\n        metadata: metadata.map((v) => ({\n          ...v,\n        })),\n        research_average: 1,\n        economy_average: 1,\n        inclusion_average: 1,\n        total_average: 1,\n        global_year: $global_year,\n      })\n    );\n    console.log(country_cut);\n    stackData = stack().keys(seriesNames);\n    series = stackData(country_cut);\n  };\n\n  let updateWeights = () => {\n    country_cut.forEach((d) => {\n      $variables.forEach((v) => {\n        get_averages = [];\n        if (v.metric_name == \"Research and Development\") {\n          v.metadata.forEach((x) => {\n            d.metadata.forEach((y) => {\n              try {\n                if ($global_year == y.PublishYear) {\n                  current_key = x.shortname_raw.concat(metric_endpoint);\n                  y[current_key] = y[x.shortname_raw] * x.multiplier;\n\n                  current_key = x.shortname_scaled.concat(metric_endpoint);\n                  y[current_key] = y[x.shortname_scaled] * x.multiplier;\n\n                  get_averages.push(y[x.shortname_scaled] * x.multiplier);\n                }\n              } catch (error) {}\n            });\n          });\n          d.research_average = mean(get_averages);\n          d[\"research_average_weighted\"] = d.research_average * v.multiplier;\n        } else if (v.metric_name == \"Economy\") {\n          d[\"economy_average_weighted\"] = d.economy_average * v.multiplier;\n          v.metadata.forEach((x) => {\n            d.metadata.forEach((y) => {\n              try {\n                if ($global_year == y.PublishYear) {\n                  current_key = x.shortname_raw.concat(metric_endpoint);\n                  y[current_key] = y[x.shortname_raw] * x.multiplier;\n\n                  current_key = x.shortname_scaled.concat(metric_endpoint);\n                  y[current_key] = y[x.shortname_scaled] * x.multiplier;\n                  get_averages.push(y[x.shortname_scaled] * x.multiplier);\n                }\n              } catch (error) {}\n            });\n          });\n          d.economy_average = mean(get_averages);\n          d[\"economy_average_weighted\"] = d.economy_average * v.multiplier;\n        } else if (v.metric_name == \"Inclusion\") {\n          d[\"inclusion_average_weighted\"] = d.inclusion_average * v.multiplier;\n          v.metadata.forEach((x) => {\n            d.metadata.forEach((y) => {\n              try {\n                if ($global_year == y.PublishYear) {\n                  current_key = x.shortname_raw.concat(metric_endpoint);\n                  y[current_key] = y[x.shortname_raw] * x.multiplier;\n\n                  current_key = x.shortname_scaled.concat(metric_endpoint);\n                  y[current_key] = y[x.shortname_scaled] * x.multiplier;\n                  get_averages.push(y[x.shortname_scaled] * x.multiplier);\n                }\n              } catch (error) {}\n            });\n          });\n          d.inclusion_average = mean(get_averages);\n          d[\"inclusion_average_weighted\"] = d.inclusion_average * v.multiplier;\n        }\n      });\n\n      d.pillars_used = 0;\n      if (d.inclusion_average_weighted) {\n        d.pillars_used = d.pillars_used + 1;\n      }\n      if (d.economy_average_weighted) {\n        d.pillars_used = d.pillars_used + 1;\n      }\n      if (d.research_average_weighted) {\n        d.pillars_used = d.pillars_used + 1;\n      }\n\n      d.total_average = mean([\n        d.inclusion_average_weighted,\n        d.economy_average_weighted,\n        d.research_average_weighted,\n      ]);\n\n      country_cut.forEach((d) => {\n        for (let x of [\n          \"inclusion_average_weighted\",\n          \"economy_average_weighted\",\n          \"research_average_weighted\",\n        ]) {\n          if (!d[x]) {\n            d[x] = 0;\n          }\n        }\n      });\n\n      d.total_average =\n        sum([\n          d.inclusion_average_weighted,\n          d.economy_average_weighted,\n          d.research_average_weighted,\n        ]) / d.pillars_used;\n\n      d.inclusion_share = d.inclusion_average_weighted / d.pillars_used;\n      d.economy_share = d.economy_average_weighted / d.pillars_used;\n      d.research_share = d.research_average_weighted / d.pillars_used;\n\n      d.total_sum =\n        d.research_average_weighted +\n        d.economy_average_weighted +\n        d.inclusion_average_weighted;\n\n      country_cut.forEach((d) => {\n        for (let x of [\"inclusion_share\", \"economy_share\", \"research_share\"]) {\n          if (!d[x]) {\n            d[x] = 0;\n          }\n        }\n      });\n    });\n    console.log(country_cut);\n    usable_country_cut = country_cut.filter((d) => {\n      return (\n        Array.from(d.metadata.map((x) => x.PublishYear)).indexOf($global_year) >\n        -1\n      );\n    });\n    console.log(usable_country_cut);\n    usable_country_cut.forEach((d) => {\n      if (!d.total_average) {\n        d.total_average = 0;\n      }\n    });\n    usable_country_cut = usable_country_cut.filter((d) => {\n      return d.total_average > 0;\n    });\n    usable_country_cut.sort((a, b) =>\n      ascending(a.total_average, b.total_average)\n    );\n    console.log(usable_country_cut);\n    country_names = Array.from(usable_country_cut.map((d) => d.country_name));\n\n    stackData = stack().keys(seriesNames);\n    series = stackData(usable_country_cut);\n    if (!data_2020 && $global_year == 2020) {\n      data_2020 = series;\n      console.log(data_2020);\n    }\n\n    console.log(flatten(series));\n  };\n\n  let current_x;\n  let current_y;\n  let show;\n  const global_axis_position = 0;\n  let pillar;\n  let type;\n  let updateTooltip = (event) => {\n    current_x = event.detail.current_x;\n    current_y = event.detail.current_y;\n    show = event.detail.show;\n    type = event.detail.type;\n  };\n  onMount(() => {\n    updateCountryData();\n    updateWeights();\n    mounted = true;\n  });\n\n  $: $global_year, updateCountryData(), updateWeights();\n  $: $variables, updateWeights();\n</script>\n\n{#if mounted}\n  <div class=\"chart-container shadow border-left-primary\">\n    <div class=\"chart-inner\">\n      <div class=\"upper\">\n        <div class=\"title-container\">\n          <h1 class=\"primary-title\">{$global_year} Global Vibrancy Ranking</h1>\n          <h3 class=\"secondary-title\">\n            Weighted Index Scores in <span class=\"research\"\n              >Research and Development</span\n            >, <span class=\"economy\"> Economy</span> and\n            <span class=\"inclusion\">Inclusion</span>\n          </h3>\n        </div>\n        <div class=\"slider\">\n          <YearSlider year=\"{$global_year}\" name=\"global_year_slider\" />\n        </div>\n      </div>\n      <div class=\"layercake\">\n        <LayerCake\n          y=\"{(d) => d.data[xKey]}\"\n          x=\"{yKey}\"\n          z=\"{zKey}\"\n          yScale=\"{scaleBand().paddingInner([0.05]).round(true)}\"\n          yDomain=\"{country_names}\"\n          zScale=\"{scaleOrdinal()}\"\n          zDomain=\"{seriesNames}\"\n          zRange=\"{seriesColors}\"\n          flatData=\"{flatten(series)}\"\n          data=\"{series}\"\n          padding=\"{{ top: 0, right: 0, bottom: 20, left: 140 }}\"\n        >\n          <Svg>\n            <AxisX axis_position=\"{global_axis_position}\" />\n            <AxisY textAnchor=\"end\" spacing=\"136\" text_size=\"\" />\n          </Svg>\n          <Html>\n            <Annotation\n              content=\"Click a bar to visit that country's profile\"\n              top=\"70\"\n              left=\"470\"\n            />\n          </Html>\n          <Svg>\n            <Bars\n              additional_data=\"{country_cut}\"\n              stacked=\"{true}\"\n              on:message=\"{updateTooltip}\"\n            />\n          </Svg>\n        </LayerCake>\n      </div>\n    </div>\n  </div>\n{/if}\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 92vh;\n    background-clip: border-box;\n    border: 1px solid #e3e6f0;\n    border-radius: 0.35rem;\n\n    pointer-events: all;\n  }\n\n  .primary-title {\n    padding-bottom: 0px;\n    margin-bottom: 0px;\n    margin-top: 0px;\n  }\n\n  .chart-inner {\n    width: 100%;\n    height: 90vh;\n    padding: 1.25rem;\n    pointer-events: all;\n  }\n\n  .layercake {\n    width: 100%;\n    height: 80vh;\n    padding-top: 0;\n    padding: 1.25rem;\n    pointer-events: all;\n  }\n\n  .upper {\n    display: flex;\n    position: -webkit-sticky;\n    position: sticky;\n    direction: column;\n    justify-content: space-between;\n    align-items: baseline;\n    margin-top: 0rem;\n  }\n\n  .secondary-title {\n    padding-bottom: 0px;\n    margin-bottom: 0.2rem;\n    margin-top: 0rem;\n  }\n\n  .shadow {\n    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15) !important;\n  }\n\n  .border-left-primary {\n    border-left: 0.25rem solid #a3d2f8 !important;\n  }\n\n  .fade {\n    width: 100%;\n    /* margin: 0 auto; */\n    /* transform: translate(-10%, 1%); */\n    height: 13.5rem;\n    background: linear-gradient(0deg, #ffffff 20%, rgba(254, 251, 247, 0) 100%);\n    position: absolute;\n    top: 150vh;\n  }\n\n  .research {\n    color: var(--dark-blue);\n  }\n\n  .economy {\n    color: var(--dark-green);\n  }\n  .inclusion {\n    color: var(--dark-plum);\n  }</style>\n",
    "<script>\n  export let command;\n  import { variables } from \"../stores/vibrancy.js\";\n  let clicked = false;\n\n  let runCommand = (command) => {\n    clicked = true;\n    if (command == \"All weights to midpoint\") {\n      $variables.forEach((x) => {\n        x.multiplier = 0.5;\n        x.metadata.forEach((y) => {\n          y.multiplier = 0.5;\n        });\n      });\n      $variables = $variables;\n    } else if (command == \"Only absolute metrics\") {\n      $variables.forEach((x) => {\n        x.metadata.forEach((y) => {\n          if (!y.metric_name.toLowerCase().includes(\"per capita\")) {\n            y.multiplier = 1;\n          } else {\n            y.multiplier = 0;\n          }\n        });\n      });\n      $variables = $variables;\n    } else if (command == \"Only per capita metrics\") {\n      $variables.forEach((x) => {\n        x.metadata.forEach((y) => {\n          if (y.metric_name.toLowerCase().includes(\"per capita\")) {\n            y.multiplier = 1;\n          } else {\n            y.multiplier = 0;\n          }\n        });\n      });\n      $variables = $variables;\n    }\n  };\n</script>\n\n<div on:click=\"{runCommand(command)}\" class=\"button-container\">\n  <button class=\"button\" value=\"{command}\">{command}</button>\n</div>\n\n<style>\n  input {\n    pointer-events: none;\n    background: var(--white);\n    cursor: pointer;\n  }\n\n  input:hover {\n  }\n\n  .button-container {\n    cursor: pointer;\n    background-color: #3A8DC7;\n    display: block;\n    background: white;\n    border: var(--dark-blue) solid 1px;\n    margin-left: -1px;\n    max-width: 33%;\n  }\n\n\n\n  .button {\n    background:none;\n    border:none;\n    color: var(--dark-blue);\n    display: block;\n  }\n\n  .button-container:first-of-type {\n    margin-left:0px;\n    border-radius: 6px 0 0 6px;\n  }\n\n  .button-container:last-of-type {\n    border-radius: 0 6px 6px 0;\n  }\n\n  .button-container:hover {\n    background: #ececf1;\n    pointer-events: all;\n  }</style>\n",
    "<script>\n  import GlobalSliders from \"./GlobalSliders.svelte\";\n  import GlobalButton from \"./GlobalButton.svelte\";\n</script>\n\n<div class=\"container\">\n  <div class=\"upper\">\n    <h2>Importance of Metrics</h2>\n    <div class=\"explanation\">\n      <p>\n        Change the weights according to what metrics are important to you. The\n        graph below will automatically update to reflect your choices.\n      </p>\n    </div>\n    <div class=\"buttons\">\n      <GlobalButton command=\"All weights to midpoint\" />\n      <GlobalButton command=\"Only per capita metrics\" />\n      <GlobalButton command=\"Only absolute metrics\" />\n    </div>\n  </div>\n  <div class=\"lower\">\n    <GlobalSliders />\n  </div>\n</div>\n\n<style>\n  .container {\n    overflow-y: hidden;\n    overflow-x: visible;\n    max-height: 430px;\n  }\n\n  .buttons {\n    display: flex;\n    justify-content: flex-start;\n  }\n\n  h2 {\n    margin-bottom: 0px;\n    padding-bottom: 0px;\n  }\n\n  .explanation {\n    padding-top: 0 !important;\n    margin-top: 0 !important;\n  }\n\n  .lower {\n    margin-top: 2rem;\n    overflow-x: visible;\n  }\n\n  div.buttons > * {\n    cursor: pointer;\n  }</style>\n",
    "<script>\n  import Slider from \"./Slider.svelte\";\n  import Collapse from \"./Collapse.svelte\";\n  import { variables } from \"../stores/vibrancy.js\";\n  import { scaleOrdinal } from \"d3-scale\";\n  const seriesNames = [\"Reseach and Development\", \"Economy\", \"Inclusion\"];\n  const seriesColors = [\"#3a8dc7\", \"#249499\", \"#9d5da3\"];\n  const scale = scaleOrdinal().domain(seriesNames).range(seriesColors);\n  let updatePillar = (event) => {\n    console.log(\"updating\");\n    console.log($variables);\n    $variables.find((d) => d.metric_name == event.detail.name).multiplier =\n      event.detail.multiplier;\n    $variables = $variables;\n  };\n  // x.find((z) => (z.id = event.detail.id)).multiplier =\n  //         event.detail.mulitplier;\n  let updateVariable = (event) => {\n    console.log(\"updating\");\n    console.log($variables);\n    $variables.forEach((d) => {\n      d.metadata.forEach((x) => {\n        if (x.id == event.detail.id) {\n          x.multiplier = event.detail.multiplier;\n        }\n      });\n    });\n    $variables = $variables;\n  };\n  let research_fix = {\n    \"Research and Development\": \"Research\",\n  };\n  let clicked = false;\n  let research_clicked = false;\n  let economy_clicked = false;\n  let inclusion_clicked = false;\n  let which_clicked = null;\n  let isInt = (n) => {\n    return parseInt(n) === n;\n  };\n</script>\n\n<div class=\"overall\">\n  {#if $variables}\n    {#each $variables as d}\n      <div\n        class=\"container\"\n        on:click=\"{() => {\n          if (d.metric_name == 'Research and Development') {\n            research_clicked = !research_clicked;\n            economy_clicked = false;\n            inclusion_clicked = false;\n            console.log(research_clicked);\n          } else if (d.metric_name == 'Economy') {\n            economy_clicked = !economy_clicked;\n            research_clicked = false;\n            inclusion_clicked = false;\n          } else if (d.metric_name == 'Inclusion') {\n            inclusion_clicked = !inclusion_clicked;\n            economy_clicked = false;\n            research_clicked = false;\n          }\n        }}\"\n      >\n        {#if d.metric_name == \"Research and Development\"}\n          <p style=\"color:{scale(d.metric_name)};\" class=\"title\">\n            {research_fix[d.metric_name]}\n          </p>\n        {:else}\n          <p style=\"color:{scale(d.metric_name)};\" class=\"title\">\n            {d.metric_name}\n          </p>\n        {/if}\n        <div class=\"slider\">\n          <Slider\n            variable=\"{d.metric_name}\"\n            name=\"{d.metric_name}\"\n            multiplier=\"{d.multiplier}\"\n            on:message=\"{updatePillar}\"\n          />\n        </div>\n\n        <Collapse\n          headerText=\"See individual metrics\"\n          color=\"{scale(d.metric_name)}\"\n          name=\"{d.metric_name}\"\n        >\n          <div\n            class=\"collapsed-sliders\"\n            headerText=\"{d.metric_name}\"\n            color=\"{scale(d.metric_name)}\"\n            style=\"overflow-y:{d.metric_name == 'Inclusion'\n              ? 'visible'\n              : 'scroll'}\"\n          >\n            <div class=\"column one\">\n              {#each d.metadata as v, i}\n                {#if isInt(i / 2)}\n                  <div class=\"slider-container\">\n                    <div class=\"slider pillar\">\n                      <Slider\n                        variable=\"{v.metric_name}\"\n                        name=\"{v.metric_name}\"\n                        id=\"{v.id}\"\n                        multiplier=\"{v.multiplier}\"\n                        on:message=\"{updateVariable}\"\n                      />\n                    </div>\n                  </div>\n                {/if}\n              {/each}\n            </div>\n\n            <div class=\"column two\">\n              {#each d.metadata as v, i}\n                {#if !isInt(i / 2)}\n                  <div class=\"slider-container\">\n                    <div class=\"slider pillar\">\n                      <Slider\n                        variable=\"{v.metric_name}\"\n                        name=\"{v.metric_name}\"\n                        id=\"{v.id}\"\n                        multiplier=\"{v.multiplier}\"\n                        on:message=\"{updateVariable}\"\n                      />\n                    </div>\n                  </div>\n                {/if}\n              {/each}\n            </div>\n          </div>\n        </Collapse>\n      </div>\n    {/each}\n  {/if}\n</div>\n\n<style>\n  .collapsed-sliders {\n    width: 100%;\n    margin-top: 0rem;\n    display: flex;\n    overflow-x: visible;\n    overflow-y: scroll;\n    min-height: 140px;\n    height: 100%;\n    max-height: 160px;\n    padding-top: 0.2rem;\n    padding-right: 0.4rem;\n    padding-bottom: 4rem;\n  }\n\n  .column {\n    flex: 50%;\n  }\n\n  .one {\n    margin-right: 5px;\n  }\n\n  .two {\n    margin-left: 5px;\n  }\n\n  .overall {\n    overflow: visible;\n    display: inline-block;\n  }\n  .container {\n    display: flex;\n    margin: 0;\n    overflow: visible;\n    flex-wrap: wrap;\n    margin-bottom: 1rem;\n    /* pointer-events: none; */\n  }\n\n  /* .container:active {\n    display: none;\n  } */\n  .title {\n    max-width: 150px;\n    margin: 0;\n    width: 120px;\n    font-size: 1.3rem;\n    margin-right: 1rem;\n    line-height: 1.2;\n  }\n\n  .slider {\n    position: relative;\n    align-self: center;\n  }\n\n  .pillar {\n    position: relative;\n    display: flex;\n    margin-bottom: 1rem;\n  }\n\n  .pillar {\n  }</style>\n",
    "<div class=\"top\">Stanford University</div>\n<div class=\"middle\"></div>\n<div class=\"lower\">Read the 2021 AI Index report</div>\n\n<!-- <div class=\"example-header\"></div> -->\n<style>\n  .example-header {\n    background-image: url(\"assets/header_example.png\");\n    height: 100%;\n    background-repeat: no-repeat;\n    background-size: cover;\n  }\n  .top {\n    background-color: black;\n    height: 25%;\n    width: 100%;\n    color: white;\n  }\n\n  .middle {\n    height: 50%;\n    width: 100%;\n    background-color: white;\n  }\n\n  .lower {\n    background-color: purple;\n    padding: 0.2rem 0 0.2rem 0;\n    height: 25%;\n    width: 100%;\n    color: white;\n    text-align: center;\n  }</style>\n",
    "<script>\n  import Tooltip from \"./Tooltip.svelte\";\n  import { methodology_year, tooltip_text } from \"../stores/vibrancy.js\";\n  export let data;\n  export let countries;\n  export let values_raw;\n  export let values_scaled;\n  export let keys;\n  export let mounted;\n  import { onMount } from \"svelte\";\n  let temp;\n  let scale_storage = [];\n  let show = false;\n\n  import { scaleLinear } from \"d3-scale\";\n  import { extent, descending } from \"d3-array\";\n  let x_pos;\n  let y_pos;\n\n  let getScale = () => {\n    scale_storage = [];\n    keys.forEach((k) => {\n      temp = {};\n      temp[\"values\"] = values_scaled.map((d) => d[k]);\n      temp[\"variable_name\"] = k;\n      if ($methodology_year == 2016 && k.includes(\"Deep Learning\")) {\n        console.log(\n          values_scaled\n            .map((d) => d[k])\n            .filter((v) => {\n              return v != \"-\";\n            })\n        );\n        temp[\"extent\"] = extent(\n          values_scaled\n            .map((d) => d[k])\n            .filter((v) => {\n              return v != \"-\";\n            })\n        );\n      } else {\n        temp[\"extent\"] = extent(values_scaled.map((d) => d[k]));\n      }\n      if ($methodology_year == 2016 && k.includes(\"Deep Learning\")) {\n        temp[\"scale\"] = scaleLinear()\n          .domain(\n            extent(\n              values_scaled\n                .map((d) => d[k])\n                .filter((v) => {\n                  return v != \"-\";\n                })\n            )\n          )\n          .range([\"#c6dbef\", \"#08306b\"]);\n      } else {\n        temp[\"scale\"] = scaleLinear()\n          .domain(extent(values_scaled.map((d) => d[k])))\n          .range([\"#c6dbef\", \"#08306b\"]);\n      }\n      scale_storage.push(temp);\n    });\n    console.log(scale_storage);\n  };\n\n  //[\"#29162b\", \"#f4eef4\"]\n\n  onMount(() => {\n    getScale();\n  });\n\n  $: values_scaled, getScale();\n  const range = [\"#29162b\", \"#f4eef4\"];\n\n  console.log(countries);\n  console.log(values_scaled);\n  console.log(keys);\n  console.log(data);\n\n  function handleMouseout() {\n    show = false;\n  }\n\n  function handleMouseover(c, k, d) {\n    console.log(d);\n\n    // $tooltip_text = $y(d).concat(\" : \").concat(Math.round(d.value), 2);\n    $tooltip_text = \"<b>\"\n      .concat(c)\n      .concat(\"</b>\")\n      .concat(\"<br>\")\n      .concat(\"————\")\n      .concat(\"<br>\")\n      .concat(k)\n      .concat(\" : \")\n      .concat(\n        values_scaled\n          .find((d) => {\n            return d.country_name == c;\n          })\n          [k].toFixed(2)\n      );\n\n    x_pos = d[\"x\"];\n    console.log(d[\"x\"]);\n    y_pos = d[\"y\"] + 22;\n    show = true;\n  }\n</script>\n\n{#if mounted}\n  <div class=\"container\">\n    {#each keys as k, i}\n      <div class=\"row\">\n        <span class=\"x-label\"\n          >{k\n            .replace(\"Number of\", \"\")\n            .replace(\"Per Capita\", \"PC\")\n            .replace(\"AI \", \"\")\n            .replace(\" (Job Titles)\", \"\")\n            .replace(\"*\", \"\")}</span\n        >\n        {#each countries as c}\n          {#if i == 0}\n            <span\n              class=\"y-label\"\n              style=\"transform:  rotate(45deg) translate(-110px,20px) ;text-align:right; width:130px;\"\n              >{c}</span\n            >\n          {/if}\n          <div\n            variable=\"{k}\"\n            country=\"{c}\"\n            class=\"cell\"\n            on:mouseover=\"{handleMouseover(c, k, this.getBoundingClientRect())}\"\n            on:mouseout=\"{handleMouseout}\"\n            style=\"background-color:{scale_storage\n              .find((x) => {\n                return x.variable_name == k;\n              })\n              .scale(\n                values_scaled.find((d) => {\n                  return d.country_name == c;\n                })[k]\n              )\n              ? scale_storage\n                  .find((x) => {\n                    return x.variable_name == k;\n                  })\n                  .scale(\n                    values_scaled.find((d) => {\n                      return d.country_name == c;\n                    })[k]\n                  )\n              : '#cccccc'};\"\n          ></div>\n        {/each}\n      </div>\n    {/each}\n    <Tooltip\n      x=\"{x_pos}\"\n      y=\"{y_pos}\"\n      width=\"fit-content\"\n      max_width=\"400px\"\n      unit=\"px\"\n      text_align=\"left\"\n      show_tooltip=\"{show}\"\n      position=\"fixed\"\n    />\n    <div class=\"legend\">\n      <div class=\"legend1\">\n        <div class=\"annotation\">\n          <p class=\"label left\">0</p>\n          <p class=\"label middle\">Index Score</p>\n          <p class=\"label right\">100</p>\n        </div>\n      </div>\n\n      <div class=\"legend2\">\n        <div class=\"box\"></div>\n        <div class=\"annotation2 no-data\">\n          <p class=\"label final\">No data available</p>\n        </div>\n      </div>\n    </div>\n  </div>\n{/if}\n\n<!-- {Math.round(\n              values_scaled.find((d) => {\n                return d.country_name == c;\n              })[k]\n            )} -->\n<style>\n  .row {\n    display: block;\n    margin: 0;\n    line-height: 0.8em;\n  }\n\n  .no-data {\n    text-align: center;\n  }\n\n  .annotation {\n    position: absolute;\n    display: flex;\n    align-items: space-between;\n    justify-content: space-between;\n  }\n\n  .label {\n    position: absolute;\n    text-align: center;\n  }\n\n  .final {\n    text-align: center;\n    margin-top: 0;\n    padding-top: 0;\n    left: -44px;\n  }\n\n  .left {\n  }\n\n  .middle {\n    left: 7vw;\n    width: 100px;\n  }\n\n  .right {\n    left: 19vw;\n  }\n\n  .legend {\n    display: flex;\n    justify-content: space-around;\n  }\n\n  .legend1 {\n    background-image: linear-gradient(to right, #c6dbef, #08306b);\n    margin-top: 2vh;\n    width: 20vw;\n    height: 2vh;\n    position: relative;\n  }\n  .legend2 {\n    margin-top: 2vh;\n    width: 20vw;\n    height: 2vh;\n    position: relative;\n  }\n  .legend2 > .box {\n    background-color: #cccccc;\n    width: 30px;\n    height: 2vh;\n  }\n\n  .cell {\n    display: inline-block;\n    width: 30px;\n    min-width: 20px;\n    min-height: 10px;\n    height: 20px;\n  }\n\n  .container {\n    height: 80vh;\n    cursor: initial;\n    display: grid;\n    position: relative;\n    margin: 0 auto;\n    padding-top: 5em;\n    padding-left: 6em;\n    left: 6em;\n  }\n\n  .y-label {\n    position: absolute;\n    text-align: right;\n    /* transform: translate(0, -20px) rotate(45deg); */\n  }\n\n  .x-label {\n    position: absolute;\n    transform: translate(-210px, 3px);\n    width: 200px;\n    text-align: right;\n    font-size: 0.8em;\n  }</style>\n",
    "<script>\n  import AnnotatedToggle from \"./AnnotatedToggle.svelte\";\n  const options = [\"Global\", \"National\"].map((d) => ({\n    id: d,\n    label: d,\n  }));\n  let value = \"Global\";\n</script>\n\n<h1>Global Vibrancy Tool</h1>\n<div class=\"explanation\">\n  <p>\n    The AI Vibrancy Tool compares countries’ activities in the AI industry. It\n    is tempting to provide a single ranking of countries, but such rankings are\n    notoriously tricky. Projecting complex, heterogeneous measures down to a\n    single number (or even a small set of numbers) is fraught with\n    methodological subtleties, and can be highly subjective or skewed.\n  </p>\n\n  <p>\n    The <b>global view</b> provides a weighted ranking of X countries based on\n    user-inputted parameters and a matrix that gives a top-level view of each\n    country’s success across selected metrics. The <b>national view</b> includes\n    a ranking across all metrics within a selected country and detailed\n    timeseries data going back to 2015 for all available metrics.\n    <b>Toggle between views using the buttons above.</b>\n  </p>\n</div>\n\n<AnnotatedToggle options=\"{options}\" value=\"{value}\" />\n\n<style>\n  h1 {\n    font-family: Circular;\n    color: var(--dark-blue);\n    font-weight: 700;\n    margin-bottom: 0;\n    padding-bottom: 0;\n  }\n\n  .explanation {\n    padding-top: 0;\n    margin-top: 0;\n  }</style>\n",
    "<script>\n  import { getContext } from \"svelte\";\n  import { scaleOrdinal } from \"d3-scale\";\n  const { data, xGet, yGet } = getContext(\"LayerCake\");\n\n  export let stroke = \"#ab00d6\";\n\n  const seriesNames = [\"Research and Development\", \"Economy\", \"Inclusion\"];\n\n  const seriesColors = [\"#3a8dc7\", \"#249499\", \"#9d5da3\"];\n  const scale = scaleOrdinal().domain(seriesNames).range(seriesColors);\n\n  $: path =\n    \"M\" +\n    $data\n      .map((d) => {\n        return $xGet(d) + \",\" + $yGet(d);\n      })\n      .join(\"L\");\n</script>\n\n<!-- <path class=\"path-line\" d=\"{path}\" \nstroke=\"{scale($data[0].pillar)}\"\n></path> -->\n\n<!-- <path class=\"path-line\" d=\"{path}\"></path> -->\n\n<path class=\"path-line\" d=\"{path}\" stroke=\"{scale($data[0].pillar)}\"></path>\n\n<!-- <path class=\"path-line\" d=\"{path}\"></path> -->\n<style>\n  .path-line {\n    fill: none;\n    stroke-linejoin: round;\n    stroke-linecap: round;\n    stroke-width: 2;\n  }</style>\n",
    "<script>\n  import { variables, data, methodology_year } from \"../stores/vibrancy.js\";\n  import { onMount } from \"svelte\";\n  import { LayerCake, Svg, Html } from \"layercake\";\n  import YearSlider from \"./YearSlider.svelte\";\n  import AxisX from \"./AxisX.svelte\";\n  import AxisY from \"./AxisY.svelte\";\n  import Collapse from \"./Collapse.svelte\";\n  import Heatmap from \"./Heatmap.svelte\";\n  import Table from \"./Table.svelte\";\n  import { group } from \"d3-array\";\n  let variable_names = [];\n  let temp_variable;\n  let table_values_scaled;\n  let table_values_raw;\n  let filtered;\n  let temp;\n  let mounted = false;\n\n  let updateTableValues = () => {\n    filtered = $data.filter((d) => {\n      return d.PublishYear == $methodology_year;\n    });\n    filtered = filtered;\n    table_values_scaled = [];\n    table_values_raw = [];\n    filtered.forEach((d) => {\n      temp = {};\n      temp[\"country_name\"] = d.CountryName;\n      variable_names.forEach((v) => {\n        temp[v.display_name] = d[v.variable_name_raw];\n      });\n      table_values_raw.push(temp);\n    });\n    table_values_raw = table_values_raw;\n\n    filtered.forEach((d) => {\n      temp = {};\n      temp[\"country_name\"] = d.CountryName;\n      variable_names.forEach((v) => {\n        temp[v.display_name] = d[v.variable_name_scaled];\n      });\n      table_values_scaled.push(temp);\n    });\n    table_values_scaled = table_values_scaled;\n    // console.log(country_values);\n    console.log($variables);\n    // console.log(filtered);\n  };\n\n  onMount(() => {\n    $variables.forEach((d) => {\n      d.metadata.forEach((v) => {\n        temp_variable = {};\n        temp_variable[\"variable_name_raw\"] = v.shortname_raw;\n        temp_variable[\"variable_name_scaled\"] = v.shortname_scaled;\n        temp_variable[\"pillar\"] = v.pillar_1;\n        temp_variable[\"display_name\"] = v.metric_name;\n        variable_names.push(temp_variable);\n      });\n    });\n    updateTableValues();\n    mounted = true;\n  });\n\n  $: $methodology_year, updateTableValues();\n  //   $: variable_names, updateTableValues();\n</script>\n\n{#if mounted}\n  <div class=\"overall-container\">\n    <Collapse headerText=\"Methodology and Data\" type=\"header\">\n      <div class=\"upper\">\n        <p class=\"description\">\n          Methodology write up for ranking here -- \"Lorem ipsum dolor sit amet,\n          consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n          labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n          exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n          Duis aute irure dolor in reprehenderit in voluptate velit esse cillum\n          dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n          proident, sunt in culpa qui officia deserunt mollit anim id est\n          laborum.\"\n        </p>\n        <h1>Data Dictionary</h1>\n        <p>Read about the variables included in the 2021 AI Index Report.</p>\n        {#each $variables as v}\n          <ul>\n            <li>\n              <Collapse headerText=\"{v.metric_name}\" type=\"header-small\">\n                {#each v.metadata as d}\n                  <li class=\"metric\">\n                    <b>{d.metric_name}</b>: {d.Definition}\n                    <i>Source: {d.source}</i>\n                  </li>\n                {/each}\n              </Collapse>\n            </li>\n          </ul>\n        {/each}\n      </div>\n      <div class=\"lower\">\n        <div class=\"title-container\">\n          <h1>View all of the data</h1>\n        </div>\n        <p>\n          Heatmap provides bird's eye view of AI Vibrancy while showing the\n          granularity of each metric.\n        </p>\n        <div class=\"heatmap shadow border-left-primary\">\n          <div class=\"chart-upper\">\n            <div class=\"title-container\">\n              <h1 class=\"primary-title\">\n                {$methodology_year} AI Vibrancy Matrix\n              </h1>\n              <h3 class=\"secondary-title\">\n                Normalized Score (0-100) of 24 Metrics\n              </h3>\n            </div>\n            <div class=\"slider\">\n              <YearSlider methodology=\"true\" />\n            </div>\n          </div>\n          <Heatmap\n            data=\"{table_values_raw}\"\n            values_raw=\"{table_values_raw}\"\n            values_scaled=\"{table_values_scaled}\"\n            countries=\"{table_values_raw.map((d) => d.country_name)}\"\n            keys=\"{variable_names.map((d) => d.display_name)}\"\n            mounted=\"{mounted}\"\n          />\n        </div>\n      </div>\n    </Collapse>\n  </div>\n{/if}\n\n<style>\n  .overall-container {\n    width: calc(100% - 25px);\n    max-width: 1100px;\n    margin: 0 auto;\n    pointer-events: all;\n    margin-top: 2rem;\n    margin-bottom: 4rem;\n    cursor: initial;\n  }\n\n  .shadow {\n    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15) !important;\n  }\n\n  .border-left-primary {\n    border-left: 0.25rem solid #a3d2f8 !important;\n  }\n\n  .metric {\n    margin-left: 1rem;\n    font-weight: 500;\n    font-family: \"Source Sans Pro\";\n  }\n\n  p {\n    font-weight: 500;\n    font-family: \"Source Sans Pro\";\n  }\n\n  .description {\n    width: 100%;\n    font-weight: 500;\n    font-family: \"Source Sans Pro\";\n  }\n  .chart-upper {\n    display: flex;\n    justify-content: space-between;\n    padding-left: 1em;\n    padding-right: 2em;\n    align-items: center;\n    margin-bottom: 1rem;\n  }\n\n  .upper {\n    width: 90%;\n    cursor: initial;\n  }\n\n  .lower {\n    width: 100%;\n    cursor: initial;\n  }\n\n  .title-container {\n    display: inline;\n  }\n\n  .primary-title {\n    margin-bottom: 0;\n    padding-bottom: 0;\n  }\n\n  .secondary-title {\n    margin-top: 0;\n    padding-top: 0px;\n  }\n\n  .heatmap {\n    margin: 0 auto;\n    height: 98vh;\n    position: relative;\n  }\n\n  .slider {\n    margin-left: 2rem;\n  }\n\n  .table {\n    width: 100%;\n    margin: 0 auto;\n  }</style>\n",
    "<script>\n  import Intro from \"../components/Intro.svelte\";\n  import NationalCountrySelect from \"./NationalCountrySelect.svelte\";\n  import NationalBars from \"./NationalBars.svelte\";\n  import NationalLines from \"./NationalLines.svelte\";\n</script>\n\n<div class=\"upper\">\n  <div class=\"intro\">\n    <Intro />\n  </div>\n  <div class=\"line0\"></div>\n  <div class=\"top-right\">\n    <NationalCountrySelect />\n  </div>\n</div>\n\n<div class=\"mid\">\n  <div class=\"chart\">\n    <NationalBars />\n  </div>\n</div>\n\n<div class=\"line\"></div>\n\n<div class=\"lower\">\n  <div class=\"title-container\">\n    <h1>Selected Metrics Over Time</h1>\n    <h3>\n      Select two individual metrics at a time to see how they have changed over\n      the years.\n    </h3>\n  </div>\n  <div class=\"chart\">\n    <NationalLines />\n  </div>\n</div>\n\n<style>\n  .intro {\n    max-width: 550px;\n    width: 50%;\n  }\n  .top-right {\n    max-width: 500px;\n\n    align-self: center;\n    justify-self: center;\n  }\n\n  .line0 {\n    width: 1px;\n    height: 350px;\n    align-self: center;\n    max-height: 400px;\n    justify-self: center;\n    margin-left: 20px;\n    margin-right: 20px;\n    background-color: var(--gray);\n  }\n  .upper {\n    display: flex;\n    direction: column;\n    justify-content: space-between;\n    width: calc(100% - 25px);\n    max-width: 1100px;\n    height: 100%;\n    margin: 0 auto;\n    margin-bottom: 2rem;\n  }\n  .chart {\n    width: 100%;\n    margin: 0 auto;\n  }\n\n  .line {\n    height: 1px;\n    width: 80%;\n    margin: 2rem auto 2rem auto;\n    /* align-self: center; */\n    /* margin: auto 0; */\n    /* height: 90%; */\n    background-color: var(--gray);\n  }\n\n  .mid {\n    width: 90%;\n    height: 100%;\n    margin: 0 auto;\n    margin-bottom: 2rem;\n    display: flex;\n    align-items: center;\n  }\n\n  .lower {\n    width: 90%;\n    margin: 0 auto;\n    /* display: flex;\n    align-items: center; */\n    margin-bottom: 6rem;\n    height: 100%;\n  }</style>\n",
    "<script>\n  import { LayerCake, Svg, Html, flatten } from \"layercake\";\n  import AxisX from \"./AxisX.svelte\";\n  import AxisY from \"./AxisY.svelte\";\n  import Annotation from \"./Annotation.svelte\";\n  import Tooltip from \"./Tooltip.svelte\";\n  import YearSlider from \"./YearSlider.svelte\";\n  import Bars from \"./Bars.svelte\";\n  import {\n    data,\n    national_year,\n    country,\n    variables,\n    number_of_metrics,\n    ranked_metric,\n    temporal_metric_1,\n    temporal_metric_2,\n  } from \"../stores/vibrancy.js\";\n\n  import { onMount, createEventDispatcher } from \"svelte\";\n  import { group, mean, ascending, sum, descending, filter } from \"d3-array\";\n  import { stack } from \"d3-shape\";\n  import { scaleBand, scaleOrdinal } from \"d3-scale\";\n  let text_sorted;\n  let mounted = false;\n  let country_cut;\n  let single_country_cut;\n  const xKey = \"value\";\n  const yKey = \"display\";\n  const zKey = \"pillar\";\n  let variable_names = [];\n  let chart_values = [];\n  let temp_variable;\n  let temp;\n  let ranked_data;\n  let ranked_values;\n  const dispatch = createEventDispatcher();\n  import codebook from \"../data/demo/codebook_2.csv\";\n\n  const seriesNames = [\"Research and Development\", \"Economy\", \"Inclusion\"];\n\n  const seriesColors = [\"#3a8dc7\", \"#249499\", \"#9d5da3\"];\n\n  let updateCountryData = () => {\n    variable_names = [];\n    chart_values = [];\n    single_country_cut = $data.find((d) => {\n      return d.CountryName == $country && d.PublishYear == $national_year;\n    });\n    console.log(single_country_cut);\n\n    $variables.forEach((d) => {\n      d.metadata.forEach((v) => {\n        if (\n          single_country_cut[v.shortname_scaled] &&\n          single_country_cut[v.shortname_scaled] != \"-\"\n        ) {\n          temp_variable = {};\n          temp_variable[\"variable_name\"] = v.shortname_scaled;\n          temp_variable[\"variable_name_raw\"] = v.shortname_raw;\n          temp_variable[\"pillar\"] = v.pillar_1;\n          temp_variable[\"display_name\"] = v.metric_name;\n          variable_names.push(temp_variable);\n        }\n      });\n    });\n\n    $number_of_metrics = variable_names.length;\n\n    variable_names.forEach((d) => {\n      temp = {};\n      temp[\"display\"] = d.display_name\n        .replace(\"Number of\", \"\")\n        .replace(\"per capita\", \"PC\")\n        .replace(\"AI \", \"\")\n        .replace(\" (Job Titles)\", \"\")\n        .replace(\"*\", \"\");\n      temp[\"pillar\"] = d.pillar;\n      temp[\"variable\"] = d.variable_name;\n      temp[\"value\"] = single_country_cut[d.variable_name];\n      chart_values.push(temp);\n    });\n    chart_values.sort((a, b) => ascending(a.value, b.value));\n    console.log(chart_values);\n    $ranked_metric = chart_values.slice(-1)[0].variable;\n    // $temporal_metric_1 = chart_values.slice(-1)[0].variable;\n    // $temporal_metric_2 = chart_values[0].variable;\n  };\n\n  let updateRankChart = () => {\n    ranked_data = $data.filter((d) => {\n      return d.PublishYear == $national_year;\n    });\n    console.log(ranked_data);\n    ranked_values = [];\n    ranked_data.forEach((d) => {\n      temp = {};\n      temp[\"country_name\"] = d.CountryName;\n      temp[\"variable\"] = $ranked_metric;\n      temp[\"value\"] = d[$ranked_metric];\n      if (temp.value && temp.value != \"-\") {\n        ranked_values.push(temp);\n      }\n    });\n\n    ranked_values.sort((a, b) => ascending(a.value, b.value));\n    text_sorted = [...ranked_values].reverse();\n    // ranked_values = text_sorted.sort((a, b) => ascending(a.value, b.value));\n    // console.log(text_sorted[0], ranked_values[0]);\n  };\n\n  let current_x;\n  let current_y;\n  let show;\n  let pillar;\n  let type;\n  let updateTooltip = (event) => {\n    current_x = event.detail.current_x;\n    current_y = event.detail.current_y;\n    show = event.detail.show;\n    type = event.detail.type;\n  };\n\n  onMount(() => {\n    updateCountryData();\n    mounted = true;\n  });\n\n  $: $national_year, updateCountryData(), updateRankChart();\n  $: $ranked_metric, updateRankChart();\n  $: $country, updateCountryData(), updateRankChart();\n</script>\n\n{#if mounted}\n  <div class=\"overall-container\">\n    <div class=\"chart-container metric-container shadow border-left-primary\">\n      <div class=\"chart-inner\">\n        <div class=\"upper\">\n          <div class=\"title-container\">\n            <h1 class=\"primary-title\">\n              {$national_year} Vibrancy Ranking in {$country}\n            </h1>\n\n            <h3 class=\"secondary-title\">\n              Normalized Scores in <span class=\"research\"\n                >Research and Development</span\n              >, <span class=\"economy\"> Economy</span> and\n              <span class=\"society\">Society</span>\n            </h3>\n          </div>\n          <div class=\"slider\">\n            <YearSlider year=\"{$national_year}\" name=\"national_year_slider\" />\n          </div>\n        </div>\n        <div class=\"layercake\">\n          <LayerCake\n            x=\"{xKey}\"\n            y=\"{yKey}\"\n            z=\"{zKey}\"\n            yScale=\"{scaleBand().paddingInner([0.05]).round(true)}\"\n            xDomain=\"{[0, null]}\"\n            zScale=\"{scaleOrdinal()}\"\n            zDomain=\"{seriesNames}\"\n            zRange=\"{seriesColors}\"\n            yDomain=\"{chart_values.map((d) => d.display)}\"\n            data=\"{chart_values}\"\n            padding=\"{{ top: 0, right: 0, bottom: 20, left: 186 }}\"\n          >\n            <Html pointerEvents=\"{false}\">\n              {#if type == \"national\"}\n                <Tooltip\n                  x=\"{current_x}\"\n                  y=\"{current_y}\"\n                  show_tooltip=\"{show}\"\n                />\n              {/if}\n              <Annotation\n                content=\"Click a bar to see where a country ranks on that variable\"\n                top=\"200\"\n                left=\"500\"\n              />\n            </Html>\n            <Svg>\n              <AxisX />\n              <AxisY textAnchor=\"end\" text_size=\".8\" spacing=\"180\" />\n            </Svg>\n            <Svg>\n              <Bars\n                additional_data=\"{single_country_cut}\"\n                stacked=\"{false}\"\n                on:message=\"{updateTooltip}\"\n              />\n            </Svg>\n          </LayerCake>\n        </div>\n      </div>\n    </div>\n    <div class=\"chart-container rank-container shadow border-right-primary\">\n      <div class=\"chart-inner\">\n        <div class=\"title-container\">\n          <h2 class=\"rank-title\">\n            {codebook\n              .find((d) => d.shortname_scaled == $ranked_metric)\n              .metric_name.replace(\"*\", \"\")}, {$national_year}\n          </h2>\n          <span class=\"rank-subhead\"\n            >Rank: {text_sorted.indexOf(\n              text_sorted.find((d) => {\n                return d.country_name == $country;\n              })\n            ) + 1} of {text_sorted.length} TK</span\n          >\n        </div>\n        <div class=\"layercake\">\n          <LayerCake\n            x=\"value\"\n            y=\"country_name\"\n            yScale=\"{scaleBand().paddingInner([0.05]).round(true)}\"\n            xDomain=\"{[0, null]}\"\n            yDomain=\"{ranked_values.map((d) => d.country_name)}\"\n            data=\"{ranked_values}\"\n            padding=\"{{ top: 0, right: 0, bottom: 20, left: 0 }}\"\n          >\n            <Html pointerEvents=\"{false}\">\n              {#if type == \"rank\"}\n                <Tooltip\n                  type=\"rank\"\n                  x=\"{current_x}\"\n                  y=\"{current_y}\"\n                  show_tooltip=\"{show}\"\n                />\n              {/if}\n            </Html>\n            <!-- <Svg>\n          <AxisX />\n          <AxisY />\n        </Svg> -->\n\n            <Svg>\n              <Bars ranked=\"{true}\" on:message=\"{updateTooltip}\" />\n            </Svg>\n          </LayerCake>\n        </div>\n      </div>\n    </div>\n  </div>\n{/if}\n\n<style>\n  .overall-container {\n    display: flex;\n    direction: column;\n    justify-content: space-between;\n    height: 100%;\n  }\n\n  .upper {\n    display: flex;\n    position: -webkit-sticky;\n    position: sticky;\n    direction: column;\n    justify-content: space-between;\n    align-items: baseline;\n    margin-top: 0rem;\n  }\n  .metric-container {\n    width: 70%;\n    height: 85vh;\n  }\n\n  .primary-title {\n    padding-bottom: 0px;\n    margin-bottom: 0px;\n    margin-top: 0px;\n  }\n\n  .rank-title {\n    padding-bottom: 0.1rem;\n    margin-top: 0.3rem;\n  }\n\n  .secondary-title {\n    padding-bottom: 0px;\n    margin-bottom: 0.4rem;\n    margin-top: 0rem;\n  }\n\n  .chart-container {\n    /* width: 100%; */\n    height: 100%;\n    background-clip: border-box;\n    border: 1px solid #e3e6f0;\n    border-radius: 0.35rem;\n    pointer-events: all;\n  }\n\n  .chart-inner {\n    width: 100%;\n    height: 85vh;\n    padding: 1.25rem;\n    pointer-events: all;\n  }\n\n  .layercake {\n    width: 100%;\n    height: 70vh;\n  }\n  .rank-container {\n    width: 25%;\n    height: 85vh;\n    line-height: 1.5em;\n  }\n\n  .shadow {\n    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15) !important;\n  }\n\n  .border-left-primary {\n    border-left: 0.25rem solid #a3d2f8 !important;\n  }\n\n  .border-right-primary {\n    border-right: 0.25rem solid #a3d2f8 !important;\n  }\n\n  .research {\n    color: var(--dark-blue);\n  }\n\n  .economy {\n    color: var(--dark-green);\n  }\n  .society {\n    color: var(--dark-plum);\n  }</style>\n",
    "<script>\n  import {\n    data,\n    country,\n    national_year,\n    number_of_metrics,\n  } from \"../stores/vibrancy.js\";\n  import Dropdown from \"./Dropdown.svelte\";\n  import { ascending } from \"d3-array\";\n</script>\n\n<div class=\"upper\">\n  <div class=\"dropdown\">\n    <p class=\"annotation\">SELECT A COUNTRY</p>\n    <Dropdown\n      items=\"{[...new Set($data.map((d) => d.CountryName))].sort(ascending)}\"\n      countries=\"true\"\n      placeholder=\"United States\"\n    />\n  </div>\n</div>\n<div class=\"body\">\n  <h3>\n    Number of metrics from {$country} in {$national_year}: {$number_of_metrics}\n  </h3>\n  <p>\n    \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n    non proident, sunt in culpa qui officia deserunt mollit anim id est\n    laborum.\"\n  </p>\n</div>\n\n<style>\n  .dropdown {\n    display: block;\n  }\n\n  .annotation {\n    font-weight: bold;\n  }</style>\n",
    "<script>\n  import { LayerCake, Svg } from \"layercake\";\n  import { onMount } from \"svelte\";\n  import {\n    data,\n    variables,\n    country,\n    temporal_metric_1,\n    temporal_metric_2,\n    ranked_metric,\n    tooltip_text,\n  } from \"../stores/vibrancy.js\";\n  import codebook from \"../data/demo/codebook_2.csv\";\n  import Tooltip from \"./Tooltip.svelte\";\n  import Line from \"./Line.svelte\";\n  import Area from \"./Area.svelte\";\n  import AxisX from \"./AxisX.svelte\";\n  import Icon from \"./helpers/Icon.svelte\";\n  import AxisY from \"./AxisY.svelte\";\n  import Dropdown from \"./Dropdown.svelte\";\n  let chart_values1;\n  let chart_values2;\n  let country_cut;\n  let temp;\n  import { ascending } from \"d3-array\";\n\n  const xKey = \"year\";\n  const yKey = \"value\";\n  let variable_names;\n  let display_names;\n  let mounted = false;\n  let show1 = false;\n  let show2 = false;\n\n  let updateLines1 = () => {\n    chart_values1 = [];\n    console.log($temporal_metric_1);\n    country_cut = $data.filter((d) => {\n      return d.CountryName == $country;\n    });\n    country_cut.forEach((d) => {\n      temp = {};\n      temp[\"variable\"] = $temporal_metric_1;\n      temp[\"pillar\"] = codebook.find((d) => {\n        return d.shortname_raw == $temporal_metric_1;\n      }).pillar_1;\n      temp[\"country_name\"] = d.CountryName;\n      temp[\"value\"] = d[$temporal_metric_1];\n      temp[\"year\"] = d.PublishYear;\n      if (temp.year && temp.value && temp.value != \"-\") {\n        chart_values1.push(temp);\n      }\n    });\n    chart_values1.sort((a, b) => ascending(a.year, b.year));\n    console.log(chart_values1);\n  };\n\n  let updateLines2 = () => {\n    chart_values2 = [];\n    console.log($temporal_metric_2);\n    country_cut = $data.filter((d) => {\n      return d.CountryName == $country;\n    });\n\n    country_cut.forEach((d) => {\n      temp = {};\n      temp[\"variable\"] = $temporal_metric_2;\n      temp[\"country_name\"] = d.CountryName;\n      temp[\"pillar\"] = codebook.find((d) => {\n        return d.shortname_raw == $temporal_metric_2;\n      }).pillar_1;\n      temp[\"value\"] = d[$temporal_metric_2];\n      temp[\"year\"] = d.PublishYear;\n      if (temp.year && temp.value && temp.value != \"-\") {\n        chart_values2.push(temp);\n      }\n    });\n    chart_values2.sort((a, b) => ascending(a.year, b.year));\n    console.log(chart_values2);\n  };\n\n  let getVariableNames = () => {\n    variable_names = [];\n    display_names = [];\n    country_cut = $data.filter((d) => {\n      return d.CountryName == $country;\n    });\n    $variables.forEach((d) => {\n      d.metadata.forEach((v) => {\n        if (\n          country_cut.slice(-1)[0][v.shortname_raw] &&\n          country_cut.slice(-2)[0][v.shortname_raw] &&\n          country_cut.slice(-1)[0][v.shortname_raw] != \"-\" &&\n          country_cut.slice(-2)[0][v.shortname_raw] != \"-\"\n        ) {\n          variable_names.push(v.shortname_raw);\n        }\n      });\n    });\n    variable_names.forEach((d) => {\n      display_names.push(\n        codebook.find((x) => x.shortname_raw == d).metric_name\n      );\n    });\n    console.log(variable_names);\n    $temporal_metric_1 = variable_names[0];\n    $temporal_metric_2 = variable_names[1];\n    console.log(display_names);\n    console.log($temporal_metric_1);\n  };\n\n  function handleMouseout() {\n    show1 = false;\n    show2 = false;\n  }\n\n  function handleMouseover1(d) {\n    show1 = true;\n    // $tooltip_text = $y(d).concat(\" : \").concat(Math.round(d.value), 2);\n    $tooltip_text = d;\n    console.log(d);\n  }\n\n  function handleMouseover2(d) {\n    show2 = true;\n    // $tooltip_text = $y(d).concat(\" : \").concat(Math.round(d.value), 2);\n    $tooltip_text = d;\n    console.log(d);\n  }\n\n  onMount(() => {\n    getVariableNames();\n    $temporal_metric_1 = variable_names[0];\n    $temporal_metric_2 = variable_names[1];\n\n    console.log($data);\n\n    mounted = true;\n  });\n\n  $: if ($temporal_metric_1) {\n    $temporal_metric_1, updateLines1();\n  }\n  $: if ($temporal_metric_2) {\n    $temporal_metric_2, updateLines2();\n  }\n  $: if (mounted) {\n    updateLines1();\n    updateLines2();\n  }\n  $: $country, getVariableNames();\n</script>\n\n{#if mounted}\n  <div class=\"overall-container\">\n    <div class=\"chart-container\">\n      <div class=\"dropdown\">\n        <p class=\"annotation\">SELECT A METRIC</p>\n        <Dropdown\n          items=\"{variable_names}\"\n          metric1=\"true\"\n          placeholder=\"{variable_names[0]}\"\n        />\n      </div>\n      {#if $temporal_metric_1}\n        <div class=\"title-container\">\n          <Tooltip\n            x=\"{84}\"\n            y=\"{182}\"\n            width=\"300px\"\n            unit=\"%\"\n            show_tooltip=\"{show1}\"\n          />\n          <h3>\n            {codebook\n              .find((d) => d.shortname_raw == $temporal_metric_1)\n              .metric_name.replace(\"*\", \"\")\n              .replace(\"Number of \", \"\")}<span\n              on:mouseout=\"{handleMouseout}\"\n              on:mouseenter=\"{handleMouseover1(\n                codebook.find((d) => d.shortname_raw == $temporal_metric_1)\n                  .Definition\n              )}\"\n              ><Icon\n                pointer-events=\"{true}\"\n                name=\"info\"\n                strokeWidth=\"{2}\"\n                dimension=\"{0.9}\"\n              /></span\n            >\n            in {$country}, {chart_values1[0].year}-{chart_values1.slice(-1)[0]\n              .year}\n          </h3>\n        </div>\n      {/if}\n      <div class=\"chart-inner\">\n        <LayerCake\n          padding=\"{{ right: 10, bottom: 20, left: 25 }}\"\n          x=\"{xKey}\"\n          y=\"{yKey}\"\n          yDomain=\"{[0, null]}\"\n          data=\"{chart_values1}\"\n        >\n          <Svg>\n            <AxisX />\n            <AxisY ticks=\"{4}\" textAnchor=\"end\" text_size=\".8\" spacing=\"20\" />\n            <Line />\n            <Area />\n          </Svg>\n        </LayerCake>\n      </div>\n    </div>\n    <div class=\"chart-container\">\n      <div class=\"dropdown\">\n        <p class=\"annotation\">SELECT A METRIC</p>\n        <Dropdown\n          items=\"{variable_names}\"\n          metric2=\"true\"\n          placeholder=\"{variable_names.slice(-1)[0]}\"\n        />\n      </div>\n      {#if $temporal_metric_2}\n        <div class=\"title-container\">\n          <Tooltip\n            x=\"{134}\"\n            y=\"{182}\"\n            width=\"300px\"\n            unit=\"%\"\n            show_tooltip=\"{show2}\"\n          />\n          <h3>\n            {codebook\n              .find((d) => d.shortname_raw == $temporal_metric_2)\n              .metric_name.replace(\"*\", \"\")\n              .replace(\"Number of \", \"\")}<span\n              on:mouseout=\"{handleMouseout}\"\n              on:mouseenter=\"{handleMouseover2(\n                codebook.find((d) => d.shortname_raw == $temporal_metric_2)\n                  .Definition\n              )}\"\n              ><Icon\n                pointer-events=\"{false}\"\n                name=\"info\"\n                strokeWidth=\"{2}\"\n                dimension=\"{0.9}\"\n              /></span\n            >\n            in {$country}, {chart_values2[0].year}-{chart_values2.slice(-1)[0]\n              .year}\n          </h3>\n        </div>\n      {/if}\n      <div class=\"chart-inner\">\n        <LayerCake\n          padding=\"{{ right: 10, bottom: 20, left: 25 }}\"\n          x=\"{xKey}\"\n          y=\"{yKey}\"\n          yDomain=\"{[0, null]}\"\n          data=\"{chart_values2}\"\n        >\n          <Svg>\n            <AxisX gridlines=\"{false}\" />\n            <AxisY ticks=\"{4}\" textAnchor=\"end\" text_size=\".8\" spacing=\"20\" />\n            <Line />\n            <Area />\n          </Svg>\n        </LayerCake>\n      </div>\n    </div>\n  </div>\n{/if}\n\n<style>\n  .chart-container {\n    width: 45%;\n    height: 100%;\n  }\n\n  .chart-inner {\n    width: 100%;\n    height: 35vh;\n    padding: 1.25rem;\n    pointer-events: all;\n  }\n\n  .overall-container {\n    display: flex;\n    direction: column;\n    justify-content: space-between;\n    width: 100%;\n    height: 100%;\n  }\n\n  h3 > * {\n    pointer-events: all;\n  }\n\n  .annotation {\n    font-weight: bold;\n  }</style>\n",
    "<script>\n  export let variable;\n  export let name;\n  export let multiplier;\n  export let id;\n  import { variables } from \"../stores/vibrancy\";\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  function update(multiplier) {\n    dispatch(\"message\", {\n      multiplier,\n      name,\n      id,\n    });\n  }\n\n  $: update(multiplier);\n</script>\n\n{#if variable != \"Research and Development\" && variable != \"Economy\" && variable != \"Inclusion\"}\n  <span class=\"slider-name\"\n    >{variable\n      .replace(\"Number of \", \"\")\n      .replace(\"*\", \"\")\n      .replace(\" Per Capita\", \" PC\")\n      .replace(\" (Job Titles)\", \"\")}</span\n  >\n{/if}\n\n{#if variable == \"Research and Development\"}\n  <span class=\"low annotation\">Low</span>\n{/if}\n{#if variable == \"Research and Development\"}\n  <span class=\"high annotation\">High importance</span>\n{/if}\n<!-- <p>{multiplier}</p> -->\n<input\n  name=\"{name}\"\n  id=\"{id}\"\n  type=\"range\"\n  step=\".1\"\n  max=\"1\"\n  min=\"0\"\n  list=\"tickmarks\"\n  bind:value=\"{multiplier}\"\n/>\n\n<datalist id=\"tickmarks\">\n  <option value=\"0\"></option>\n  <option value=\".1\"></option>\n  <option value=\".2\"></option>\n  <option value=\".3\"></option>\n  <option value=\".4\"></option>\n  <option value=\".5\"></option>\n  <option value=\".6\"></option>\n  <option value=\".7\"></option>\n  <option value=\".8\"></option>\n  <option value=\".9\"></option>\n  <option value=\"1\"></option>\n</datalist>\n\n<!-- <p>{multiplier}</p> -->\n<style>\n  .annotation {\n    position: absolute;\n    font-size: 0.8rem;\n    top: 5px;\n  }\n\n  .slider-name {\n    width: 100%;\n    text-align: right;\n    max-width: 150px;\n    margin-right: 0.2rem;\n    font-size: 0.8rem;\n  }\n\n  .low {\n    text-align: right;\n    left: 0;\n    transform: translate(calc(-50%), -120%);\n  }\n  input {\n    margin-left: 0.2rem;\n    padding-left: 0;\n  }\n\n  .high {\n    text-align: left;\n    right: 0;\n    transform: translate(calc(50% - 10px), -120%);\n  }</style>\n",
    "<script>\n  export let data;\n  export let keys;\n  export let mounted;\n  import { methodology_year } from \"../stores/vibrancy.js\";\n  console.log(keys);\n  let export_data;\n  $: mounted, console.log(keys);\n  let file;\n\n  function download_csv(csv, filename) {\n    console.log(csv);\n    let csvFile;\n    let downloadLink;\n    // CSV FILE\n    csvFile = new Blob([csv], { type: \"text/csv\" });\n    // Download link\n    downloadLink = document.createElement(\"a\");\n    // File name\n    downloadLink.download = filename;\n    downloadLink.id = \"downloader\";\n    // We have to create a link to the file\n    downloadLink.href = window.URL.createObjectURL(csvFile);\n    // Make sure that the link is not displayed\n    downloadLink.style.display = \"none\";\n    console.log(downloadLink);\n    // Add the link to your DOM\n    document.body.appendChild(downloadLink);\n    // Lanzamos\n    document.querySelector(\"#downloader\").click();\n    // remove the link\n    document.body.removeChild(downloadLink);\n  }\n\n  function export_table_to_csv(html, filename) {\n    var csv = [];\n    var rows = document.querySelectorAll(\"table tr\");\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = [],\n        cols = rows[i].querySelectorAll(\"td, th\");\n\n      for (var j = 0; j < cols.length; j++) row.push(cols[j].innerText);\n\n      csv.push(row.join(\",\"));\n    }\n\n    // Download CSV\n    download_csv(csv.join(\"\\n\"), filename);\n  }\n\n  document.querySelector(\"button\").addEventListener(\"click\", function () {});\n\n  let exportTable = () => {\n    console.log(\"clicked\");\n    var html = document.querySelector(\"table\").outerHTML;\n    file = $methodology_year.toString().concat(\"_data.csv\");\n    export_table_to_csv(export_data, file);\n  };\n</script>\n\n<div class=\"overall-container\">\n  <button on:click=\"{() => exportTable()}\">Export table to csv</button>\n  <div class=\"table-container\">\n    <table>\n      <thead>\n        <tr>\n          {#each keys as k}\n            {#if k == \"country_name\"}\n              <th></th>\n            {:else}\n              <th>{k}</th>\n            {/if}\n          {/each}\n        </tr>\n      </thead>\n      <tbody>\n        {#each data as d}\n          <tr>\n            {#each keys as k}\n              <td>{d[k]}</td>\n            {/each}\n          </tr>\n        {/each}\n      </tbody>\n    </table>\n  </div>\n</div>\n\n<style>\n  .table-container {\n    margin: 0 auto;\n    width: 100%;\n    height: 70vw;\n    overflow: scroll;\n  }\n\n  th {\n    min-width: 10rem;\n    width: 10rem;\n  }\n\n  .overall-container {\n    pointer-events: all;\n  }</style>\n",
    "<script>\n  import { toggle } from \"../stores/vibrancy.js\";\n  export let options = [];\n  export let value = $toggle;\n  export let onChange = () => {};\n\n  const onChangeLocal = (option) => {\n    onChange(option);\n    value = option.id;\n    console.log(value);\n    $toggle = value;\n  };\n</script>\n\n<div class=\"c\">\n  {#each options as option}\n    <button\n      class=\"option\"\n      class:selected=\"{option.id == $toggle}\"\n      on:click=\"{() => onChangeLocal(option)}\"\n    >\n      {option.label}\n    </button>\n  {/each}\n</div>\n\n<style>\n  .c {\n    display: flex;\n    align-items: center;\n  }\n  .option:hover {\n    background: #ececf1;\n  }\n  .option.selected,\n  .option.selected:hover {\n    background: var(--dark-blue);\n    color: var(--white);\n  }\n\n  /* gravy */\n  .option {\n    padding: 0.6em 1em;\n    line-height: 1.3em;\n    -webkit-appearance: none;\n       -moz-appearance: none;\n            appearance: none;\n    background: none;\n    font-weight: 600;\n    font-size: 1.2em;\n    color: var(--dark-blue);\n    border: 1px solid var(--dark-blue);\n    border-radius: 0;\n    outline: none;\n    cursor: pointer;\n  }\n  .option + .option {\n    border-left-width: 0;\n  }\n  .option:first-of-type {\n    border-radius: 6px 0 0 6px;\n  }\n  .option:last-of-type {\n    border-radius: 0 6px 6px 0;\n  }</style>\n",
    "<script>\n  import { tooltip_text } from \"../stores/vibrancy.js\";\n  export let x;\n  export let y;\n  export let show_tooltip;\n  export let text_align = \"center\";\n  export let unit = \"px\";\n  export let width = 120;\n  export let max_width = \"240px\";\n  export let position = \"absolute\";\n</script>\n\n<div\n  style=\"top:{y}{unit};left:{x -\n    60}{unit};width:{width};max-width:{max_width};position:{position};text-align:{text_align}\"\n  class=\"tooltip\"\n  class:visible=\"{show_tooltip}\"\n>\n  {@html $tooltip_text}\n</div>\n\n<style>\n  .tooltip {\n    visibility: hidden;\n    width: 120px;\n    background-color: var(--extra-light-plum);\n    color: var(--extra-dark-plum);\n    text-align: center;\n    padding: 5px 5px;\n    border-radius: 6px;\n    pointer-events: none;\n    font-family: \"Source Sans Pro\";\n    font-weight: 300;\n    border: 1px solid var(--light-plum);\n    box-shadow: 0px 2px 10px rgba(191, 178, 162, 0.25);\n\n    /* Position the tooltip text - see examples below! */\n    position: absolute;\n    z-index: 1;\n  }\n  .visible {\n    visibility: visible;\n  }</style>\n",
    "<script>\n  export let name;\n  export let year = 2020;\n  import { toggle } from \"../stores/vibrancy.js\";\n  import {\n    national_year,\n    global_year,\n    methodology_year,\n  } from \"../stores/vibrancy.js\";\n  export let methodology;\n\n  let updateYear = () => {\n    if ($toggle == \"Global\" && !methodology) {\n      $global_year = year;\n    } else if ($toggle == \"National\" && !methodology) {\n      $national_year = year;\n    } else if (methodology) {\n      $methodology_year = year;\n    }\n  };\n\n  $: year, updateYear();\n</script>\n\n<div class=\"container\">\n  <span class=\"top\">Choose a year</span>\n  <span class=\"low annotation\">2015</span>\n  <span class=\"high annotation\">2020</span>\n  <input\n    name=\"{name}\"\n    type=\"range\"\n    step=\"1\"\n    max=\"2020\"\n    min=\"2015\"\n    list=\"tickmarks\"\n    bind:value=\"{year}\"\n  />\n</div>\n\n<datalist id=\"tickmarks\">\n  <option value=\"2015\"></option>\n  <option value=\"2016\"></option>\n  <option value=\"2017\"></option>\n  <option value=\"2018\"></option>\n  <option value=\"2019\"></option>\n  <option value=\"2020\"></option>\n</datalist>\n\n<style>\n  .annotation {\n    position: absolute;\n    display: inline-block;\n  }\n  .container {\n    /* display: flex;\n    align-items: center; */\n  }\n  .top {\n    display: inline-block;\n    text-align: center;\n    /* margin: 0 auto; */\n  }\n\n  .low {\n    text-align: right;\n    transform: translate(-7.4em, 2.4em);\n  }\n\n  .high {\n    text-align: left;\n    transform: translate(0em, 2.4em);\n  }</style>\n",
    "<script>\n  import feather from \"feather-icons\";\n  export const directions = [\"n\", \"ne\", \"e\", \"se\", \"s\", \"sw\", \"w\", \"nw\"];\n\n  export let name;\n  export let direction = \"n\";\n  export let strokeWidth;\n  export let stroke;\n  export let dimension = 1;\n\n  $: icon = feather.icons[name];\n  $: rotation = directions.indexOf(direction) * 45;\n  $: if (icon) {\n    if (stroke) icon.attrs[\"stroke\"] = stroke;\n    if (strokeWidth) icon.attrs[\"stroke-width\"] = strokeWidth;\n  }\n</script>\n\n{#if icon}\n  <svg\n    {...icon.attrs}\n    style=\"{`transform: rotate(${rotation}deg);width:${dimension}em;height:${dimension}em`}\"\n  >\n    <g>\n      {@html icon.contents}\n    </g>\n  </svg>\n{/if}\n\n<style>\n  svg {\n    width: 1em;\n    height: 1em;\n    overflow: visible;\n    transform-origin: 50% 50%;\n    pointer-events: none;\n  }</style>\n"
  ],
  "names": [],
  "mappings": "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"
}